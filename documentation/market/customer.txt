----------------------------------------------CUSTOMER----------------------------------------------

DATA
//mCash inherited from Person
Map<Item, Integer> mItemInventory; //personal inventory
Map<Item, Integer> mItemsDesired; //not ordered yet

List<Order> mOrders;
List<Invoice> mInvoices;

int mMarketToOrderFrom = 0; //TODO: use for market switching % Market.getNumMarkets


MESSAGES

	void msgInvoiceToPerson(Map<Item, Integer> cannotFulfill, Invoice invoice){
		mInvoices.add(invoice);


		//not being fulfilled
		for (iItem : cannotFulfill){
			add int to mItemsDesired
		}

		invoice.mOrder.mEvent = EnumOrderEvent.RECEIVED_INVOICE;
		stateChanged();
	}









	void msgBillToCustomer(Bill bill){
		mBillsToPay.add(bill);
		stateChanged();
	}

	void msgHereIsReceipt(Receipt receipt){
		mReceiptsToBeFulfilled.add(receipt);
		stateChanged();
	}


	void msgCustomerOrderReady(Order order, MarketWorkerAgent worker){
		//add corresponding receipt to list to get from the worker
		for (iReceipt : mReceipts){
			if (iReceipt.mBill.mOrder == order){
				mOrdersToGet.put(iReceipt, worker);
				mReceipts.remove(iReceipt);
			}
		}
		stateChanged();
	}

	void msgHereIsCustomerOrder(Order order){
		for each item in order{
			remove from mItemsIncoming
			add to mItems
		}

		find corresponding order in mOrdersInProcess and remove it

		stateChanged();
	}





SCHEDULER

boolean pickAndExecuteAnAction(){

	//form order

	for (Order iOrder : mOrders){
		if ((iOrder.mStatus == EnumOrderStatus.CARTED) && (1)){
			iOrder.mStatus == EnumOrderStatus.PLACED;
			placeOrder(iOrder);
			return true;
		}
		if ((iOrder.mStatus == EnumOrderStatus.PAYING) && (iOrder.mEvent == EnumOrderEvent.RECEIVED_INVOICE)){
			iOrder.mStatus == EnumOrderStatus.PAID;
			payForOrder(iOrder);
			return true;
		}
	}










	//order items
	//somehow decide to get some items?
	if (mItemsDesired.size() != 0)
		orderItems();
		return true;
	}
	
	//pay order
	if (mBillsToPay.size() > 0){
		payBill();
		return true;
	}
	
	//receive order
	if (mOrdersToGet.size() > 0){
		getOrder();
		return true;
	}

	return false;
}



ACTIONS

void formOrder(){
	//TODO: form order
}

void placeOrder(Order order){
	mCashier.msgCustomerWantsOrder(order);
}

void payForOrder(Order order){
	Invoice invoice;
	for (Invoice iInvoice : mInvoice){
		if (iInvoice.mOrder = order) invoice = iInvoice;
		break;
	}
	if (invoice == null) throw error

	if (invoice.mTotal > mCash){
		throw error?
	}

	mCash -= invoice.mTotal;
	invoice.mPayment += invoice.mTotal;

	mCashier.msgPayingForOrder(invoice);
}









void getOrder(){
	Receipt receipt = get first receipt from mOrdersToGet
	Worker worker = get corresponding worker

	worker.msgReceiptValidation(receipt);

	mOrdersInProcess.put(first entry of mOrdersToGet)
	mOrdersToGet remove first entry
}