----------------------------------------------CUSTOMER----------------------------------------------

DATA
//mCash inherited from Person
Map<Item, Integer> mItemInventory; //personal inventory
Map<Item, Integer> mItemsDesired; //not ordered yet

List<Order> mOrders;
List<Invoice> mInvoices;

Cashier mCashier;

int mMarketToOrderFrom = 0; //TODO: use for market switching % Market.getNumMarkets


MESSAGES

	void msgInvoiceToPerson(Map<Item, Integer> cannotFulfill, Invoice invoice){
		mInvoices.add(invoice);

		//not being fulfilled
		for (iItem : cannotFulfill){
			add int to mItemsDesired
		}

		invoice.mOrder.mEvent = EnumOrderEvent.RECEIVED_INVOICE;
		stateChanged();
	}


	void msgHereIsCustomerOrder(Order order){

		for ecah item in order{
			add to mItems
		}

		order.mStatus = EnumOrderEvent.RECEIVED_ORDER;
		stateChanged();
	}


SCHEDULER

boolean pickAndExecuteAnAction(){

	//form order

	for (Order iOrder : mOrders){
		if ((iOrder.mStatus == EnumOrderStatus.CARTED) && (1)){
			iOrder.mStatus == EnumOrderStatus.PLACED;
			placeOrder(iOrder);
			return true;
		}
		if ((iOrder.mStatus == EnumOrderStatus.PAYING) && (iOrder.mEvent == EnumOrderEvent.RECEIVED_INVOICE)){
			iOrder.mStatus == EnumOrderStatus.PAID;
			payForOrder(iOrder);
			return true;
		}

		if ((iOrder.mStatus == EnumOrderStatus.FULFILLING) && (iOrder.mEvent == EnumOrderEvent.RECEIVED_ORDER)){
			iOrder.mStatus == EnumOrderStatus.DONE;
			removeOrder(iOrder);
			return true;
		}
	}

	return false;
}



ACTIONS

void formOrder(){
	//TODO: form order
}

void placeOrder(Order order){
	mCashier.msgOrderPlacement(order);
}

void payForOrder(Order order){
	Invoice invoice;
	for (Invoice iInvoice : mInvoice){
		if (iInvoice.mOrder = order) invoice = iInvoice;
		break;
	}
	if (invoice == null) throw error

	if (invoice.mTotal > mCash){
		throw error?
	}

	mCash -= invoice.mTotal;
	invoice.mPayment += invoice.mTotal;

	mCashier.msgPayingForOrder(invoice);
}

void removeOrder(Order order){
	remove from mOrders and mInvoices
}