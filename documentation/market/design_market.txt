
									  -Design Document: Market-

-----------------------------------------INTERACTION DIAGRAM-----------------------------------------

Market
	Original OrderStatus	OrderEvent			New OrderStatus				Message							Parameters					[Sender] 	--> [Recipient]				
1.	CARTED					1					PLACED						msgOrderPlacement				Order 						Customer/Cook	Cashier					
2.	PLACED					ORDER_PLACED		PAYING						msgInvoiceToPerson				Map<Item, Integer>, Invoice Cashier			Customer/Cook		
3.	PAYING					RECEIVED_INVOICE	PAID						msgPayingForOrder				Invoice	 					Customer/Cook	Cashier					
4.	PAID					1					ORDERING					msgFulfillOrder					Order						Cashier			Worker			

5a.	ORDERING				TOLD_TO_FULFILL		FULFILLING					msgHereIsCustomerOrder			Order						Worker			Customer
6a.	FULFILLING				RECEIVED_ORDER		DONE						(action: remove order)										Customer		

5b.	ORDERING				TOLD_TO_SEND		DELIVERING					msgDeliverOrderToCook			Order						Worker			DeliveryTruck			
6b.	DELIVERING				TOLD_TO_DELIVER		FULFILLING					msgHereIsCookOrder				Order						DeliveryTruck	Cook					
7b.	FULFILLING				RECEIVED_ORDER		DONE						(action: remove order)										Cook


Item
	static enum EnumItemType = new enum {item possibilities}
	static Map<Item, Integer> sPrices;

Order
	static enum EnumOrderStatus {CARTED, PLACED, PAYING, PAID, PAYMENT_RECEIVED, ORDERING, DELIVERING, VALIDATING, VALIDATED, DONE};
	EnumOrderStatus mStatus;
	static enum EnumOrderEvent {ORDER_PLACED, RECEIVED_INVOICE, ORDER_PAID, TOLD_TO_FULFILL, TOLD_TO_SEND, TOLD_TO_DELIVER, ORDER_READY};
	EnumOrderEvent mEvent;
	Map<Item, Integer> mItems;
	Person mPerson; //TODO: Role???????????????????
	Worker mWorker;
	Cashier mCashier;
	
Invoice
	Order mOrder;
	final int mTotal;
	int mPayment;
	boolean mPaid; //signed by the cashier


*Customer = MarketCustomerAgent
*Worker = MarketWorkerAgent
*Cashier = MarketCashierAgent
*Cook = MarketCookAgent
*DeliveryTruck = MarketDeliveryTruckAgent


