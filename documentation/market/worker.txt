-----------------------------------------------WORKER-----------------------------------------------

DATA
List<MyOrder> mCustomerOrders;
List<MyDeliveryOrder> mDeliveryOrders;
Timer mTimer;
int mBaseTime;

enum OrderStatus {Pending, Fulfilling, Ready, Validating, Validated, BeingDelivered, Finished};

class MyOrder {
	Order mo;
	OrderStatus ms;
}

class MyDeliveryOrder {
	Order mo;
	Bill mb;
	DeliveryTruck md;
}

MESSAGES
msgFulfillCustomerOrder(Order o) {
	mCustomerOrders.add(new MyOrder(o, OrderStatus.Pending));
}

msgReceiptValidation(Receipt r) {
	if ∃ order in mCustomerOrders ∈ order = r.mBill.mOrder
		then order.ms = Validated;
}

msgFulfillDeliveryOrder(Order o, Bill b, DeliveryTruck d) {
	mDeliveryOrders.add(new MyOrder(o, b, d, OrderStatus.Pending));
}

msgOrderDone(Order o) {					//from timer or animation
	if ∃ order in mCustomerOrders ∈ order.mo = o
		then order.ms = Ready;
	if ∃ order in mDeliveryOrders ∈ order.mo = o
		then order.ms = Ready;
}

msgDeliveryFinished(Bill b) {
	if ∃ order in mDeliveryOrders ∈ order.mb = b
		then order.ms = Delivered;
}

SCHEDULER
if ∃ order in mCustomerOrders ∈ order.ms = Validated
	then giveCustomerOrder(order);
if ∃ order in mDeliveryOrders ∈ order.ms = Delivered
	then finishDeliveryOrder(order);
if ∃ order in mCustomerOrders ∈ order.ms = Ready
	then validateOrder(order);
if ∃ order in mDeliveryOrders ∈ order.ms = Ready
	then giveOrderToDeliveryTruck(order);
if ∃ order in mCustomerOrders ∈ order.ms = Pending
	then fulfillOrder(order);
if ∃ order in mDeliveryOrders ∈ order.ms = Pending
	then fulfillOrder(order);

ACTIONS
fulfillOrder(MyOrder o)
	o.ms = Fulfilling;
	mTimer.start(run(msgOrderDone(o),mBaseTime));	//either a timer or call to animation
}

giveOrderToDeliveryToOrder(MyOrder o) {
	o.ms = BeingDelivered;
	o.md.msgDeliverOrderAndBill(o.mo, o.mb);
}

validateOrder(MyOrder o) {
	o.ms = Validating;
	o.mo.mPerson.msgCustomerOrderReady(o.mo);
}

giveCustomerOrder(MyOrder o) {
	o.ms = Finished;
	o.mo.mPerson.msgHereIsCustomerOrder(o.mo);
}

finishDeliveryOrder(MyOrder o) {
	o.ms = Finished;
}
