----------------------------------------------CASHIER----------------------------------------------

DATA
Map<EnumItemType, Integer> mInventory;
List<Worker> mWorkers;
static int mWorkerIndex;
int mCash;

List<Order> mOrders;
List<Invoice> mInvoices;


MESSAGES

	msgOrderPlacement(Order order){
		mOrders.add(order);
		order.mEvent = EnumOrderEvent.ORDER_PLACED;
		stateChanged();
	}

	msgPayingForOrder(Invoice invoice){
		if (invoice.mTotal == invoice.mPayment){
			invoice.mOrder.mEvent = EnumOrderEvent.ORDER_PAID;
		}
		else throw error?
		stateChanged();
	}







	msgDeliverPayment(Receipt receipt){
		mCash += receipt.mBill.mPayment;
		//no state changed
	}


SCHEDULER

boolean pickAndExecuteAnAction(){
	
	//notify customer if an order has been placed
	if (mOrders.size() > 0){
		for (Order iOrder : mOrders){
			if ((iOrder.mStatus == EnumOrderStatus.PLACED) && (iOrder.mEvent == EnumOrderEvent.ORDER_PLACED)){
				iOrder.mStatus = EnumOrderStatus.PAYING;
				notifyPerson(iOrder);
				return true;
			}

			if ((iOrder.mStatus == EnumOrderStatus.PAID) && (iOrder.mEvent == EnumOrderEvent.ORDER_PAID)){
				iOrder.mStatus = EnumOrderStatus.PAYMENT_RECEIVED;
				fulfillOrder(iOrder);
				return true;
			}



		}
	}





	//customer payment
	if (mCustomerBills.size() > 0){
		customerPayment();
		return true;
	}
	
}


ACTIONS
void notifyPerson(Order order){
	Map<Item, Integer> canFulfill;
	int cost;

	//set cost
	for (EnumItemType iItemType : order.mItems.keySet()){
		int amountCanFulfill = Math.max(order.mItems.get(iItemType), mInventory.get(iItemType));
		canFulfill.put(iItemType, amountCanFulfill);
		cost += cost of item * amountCanFulfill;
	}


	Person person = order.mPerson;
	Invoice invoice = new Invoice(order, cost);

	//if a cook
	if (person instanceof Cook){
		Cook cook = (Cook) order.mPerson;
		cook.msgInvoiceToPerson(canFulfill, invoice);
	}

	//if a customer
	else if (person instanceof Customer){
		Customer customer = (Customer) order.mPerson;
		customer.msgInvoiceToPerson(canFulfill, invoice);
	}
}


void fulfillOrder(Order order){
}



void customerPayment(){




		//tell worker to fulfill order
		Worker worker = mWorkers.get(mWorkerIndex);
		increase worker index mod style

		worker.msgFulfillCookOrder(orderCanFulfill);




	Bill bill = mCustomerBills.get(0);
	boolean paid = (bill.mPayment == bill.mTotal);

	Receipt receipt = new Receipt(bill, paid);

	Customer customer = bill.mOrder.mCustomer; //cast to person

	customer.msgHereIsReceipt(receipt);

	mCustomerBills.remove(0);
}


