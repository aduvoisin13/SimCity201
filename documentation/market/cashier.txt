----------------------------------------------CASHIER----------------------------------------------

DATA
Map<EnumItemType, Integer> mInventory;
List<Worker> mWorkers;
static int mWorkerIndex;
int mCash;

List<Order> mOrders;
List<Invoice> mInvoices;


MESSAGES

	msgOrderPlacement(Order order){
		mOrders.add(order);
		order.mStatus = EnumOrderStatus.PLACED;
		stateChanged();
	}

	msgPayingForOrder(Bill bill){
		mCustomerBills.add(bill);
		stateChanged();
	}

	msgDeliverPayment(Receipt receipt){
		mCash += receipt.mBill.mPayment;
		//no state changed
	}


SCHEDULER

boolean pickAndExecuteAnAction(){
	
	//notify customer if an order has been placed
	if (mOrders.size() > 0){
		for (Order iOrder : mOrders){
			if (iOrder.mOrderStatus == EnumOrderStatus.PLACED){
				notifyPerson(iOrder);
				return true;
			}
		}
	}

	//customer payment
	if (mCustomerBills.size() > 0){
		customerPayment();
		return true;
	}
	
}


ACTIONS
void notifyPerson(Order order){
	Order orderCanFulfill = new Order();
	int cost;

	for (EnumItemType iItemType : order.mItems.keySet()){
		int amountCanFulfill = Math.max(order.mItems.get(iItemType), mInventory.get(iItemType));
		orderCanFulfill.mItems.put(iItemType, amountCanFulfill);
		cost += cost of item * amountCanFulfill;
	}

	Person person = order.mPerson;

	//if a cook
	if (person instanceof Cook){
		Cook cook = (Cook) order.mPerson;
		orderCanFulfill.mPerson = cook;

		cook.msgCanFulfillOrder(order, orderCanFulfill);


		//tell worker to fulfill order
		Worker worker = mWorkers.get(mWorkerIndex);
		increase worker index mod style

		worker.msgFulfillCookOrder(orderCanFulfill);


	}

	//if a customer
	else if (person instanceof Customer){
		Customer customer = (Customer) order.mPerson;
		orderCanFulfill.mPerson = customer;
		Invoice invoice = new Invoice(orderCanFulfill, cost);

		customer.msgInvoiceToCustomer(bill);
	}

	


	mOrders.remove(0);
	//change to state change
}


void customerPayment(){
	Bill bill = mCustomerBills.get(0);
	boolean paid = (bill.mPayment == bill.mTotal);

	Receipt receipt = new Receipt(bill, paid);

	Customer customer = bill.mOrder.mCustomer; //cast to person

	customer.msgHereIsReceipt(receipt);

	mCustomerBills.remove(0);
}


