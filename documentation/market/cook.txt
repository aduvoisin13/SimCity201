OFFICIAL VERSION IS NOW ON THE WIKI

------------------------------------------------COOK------------------------------------------------

DATA
RestaurantCashierRole mRestaurantCashier;	//form restaurantCookRole
Map<Item, Integer> mItemInventory;			//from restaurantCookRole
Map<Item, Integer> mItemsDesired;			//from restaurantCookRole

Map<Item, Integer> mCannotFulfill;

List<Order> mOrders;
List<Invoice> mInvoices;

MarketCashierRole mMarketCashier;	//market cashier for this specific market

MESSAGES
msgInvoiceToPerson(Map<Item, Integer> cannotFulfill, Invoice invoice) {
	mInvoices.add(invoice);
	
	mCannotFulfill = cannotFulfill;
	
	invoice.mOrder.mEvent = RECEIVED_INVOICE;
}

msgHereIsCookOrder(Order o) {
	o.mStatus = RECEIVED_ORDER;
}

SCHEDULER
if ∃ order in mOrders ∈ order.mStatus = PAYING & order.mEvent = RECEIVED_INVOICE
	then invoice.mOrder.mStatus = PAID;
	payAndProcessOrder(invoice);
if ∃ order in mOrders ∈ order.mStatus = FULFILLING & order.mEvent = RECIEVED_ORDER
	then order.mStatus = DONE;
	completeOrder(order);
if ∃ order in mOrders ∈ order.mStatus = CARTED
	then order.mStatus = PLACED;
	placeOrder(order);
if ∃ item in mItemsDesired ∈ mItemsDesired.get(item) != 0
	then createOrder();

ACTIONS
createOrder() {
	Order o = new Order(mItemsDesired, CARTED);		//copy of mItemsDesired
	
	foreach item in mItemsDesired
		mItemsOrdered.get(item) += mItemsDesired.get(item);
		mItemsDesired.get(item) = 0;
		
	mOrders.add(i.o);
}

placeOrder(Order o) {
	mMarketCashier.msgOrderPlacement(o);
}

payAndProcessOrder(Invoice i) {
	i.mPayment = i.mTotal;
	
	if ∃ item in cannotFulfill	
		then mItemsDesired.get(item) += cannotFulfill.get(item);

	mRestaurantCashier.msgHereIsInvoice(i);	//tell restaurant about payment
	mMarketCashier.msgPayingForOrder(i);
	mInvoices.remove(i);
}

completeOrder(Order o) {
	foreach item in o.mItems
		mItemInventory.get(item) += i.o.mItems.get(item);

	mOrders.remove(o);
	
}
