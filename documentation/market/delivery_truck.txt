OFFICIAL VERSION IS NOW ON THE WIKI

-------------------------------------------DELIVERY TRUCK-------------------------------------------

DATA
List<MyDelivery> mDeliveries;

enum Status {Pending, GoingToDeliveryLocation, DeliveringOrder, AwaitingPayment, ReceivedPayment, Delivered, NotifyingOfDelivery, Finished}

class MyDelivery {
	Bill mb;
	Receipt mr;
	Status ms;
}

MESSAGES
msgDeliverOrderAndBill(Bill b) {
	if ∃ delivery in mDeliveries ∈ delivery.mb = b;
		then mDeliveries.add(new MyDelivery(b, Status.Pending);
}

msgPayingDeliveryTruck(Bill b) {
	if ∃ delivery in mDeliveries ∈ delivery.mb = b
		then delivery.ms = ReceivedPayment;
}

msgAtRestaurant(Bill b) {
	if ∃ delivery in mDeliveries ∈ delivery.mb = b
		then delivery.ms = DeliveringOrder;
}

msgAtMarket() {
	if ∃ delivery in mDeliveries ∈ delivery.ms = BringingReceiptToMarket
		then deliver.ms = NotifyingOfDelivery;

SCHEDULER
if ∃ delivery in mDeliveries ∈ delivery.ms = NotifyingOfDelivery;
	then notifyDeliveryFinished(delivery);
if ∃ delivery in mDeliveries ∈ delivery.ms = Pending;
	then deliverOrder(delivery);
if ∃ delivery in mDeliveries ∈ delivery.ms = DeliveringOrder;
	then giveOrder(delivery);
if ∃ delivery in mDeliveries ∈ delivery.ms = ReceivedPayment;
	then acceptPayment(delivery);
if ∃ delivery in mDeliveries ∈ delivery.ms = Delivered;
	then returnToMarket(delivery);

ACTIONS
deliverOrder(MyDelivery d) {
	d.ms = GoingToDeliveryLocation
	DoDeliverOrder(d);		//animation call
}

giveOrder(MyDelivery d) {
	d.ms = AwaitingPayment;
	d.mb.mOrder.mPerson.msgOrderAndBillToCook(d.mb.mOrder, this);
}

acceptPayment(MyDelivery d) {
	d.ms = Delivered;
	Receipt r = new Receipt(d.mb);
	d.mr = r;
	d.mo.mPerson.msgHereIsCookReceipt(r);
}

returnToMarket(MyDelivery d) {
	d.ms = BringingReceiptToMarket
	DoGoToMarket();			//animation call
}

notifyDeliveryFinished(MyDelivery d) {
	d.ms = Finished;
	cashier.msgDeliverPayment(d.r);
}




