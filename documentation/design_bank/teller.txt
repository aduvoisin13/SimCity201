-----------------------------TELLER----------------------------------------

DATA
----

//DATABASE MGMT?//

class Account{
	int ID;
	string name;
	double loan = 0;
	double balance = 0;
}
//This list is accessed by ALL tellers	
List<Account> accounts;

class myCustomer{
	Customer c;
	int amount;
	State state;
	{none, deposit, withdrawal, check, open, loan, payment, robbery}
}

//Used by Guard to send Customer
int location;

//Agent Correspondent//
Guard guard;
myCustomer customer; (Only service one at a time)


MESSAGES
--------

deposit(Customer c, int amount){
	customer.c = c;
	customer.amount = amount;
	customer.state = deposit;
}

withdrawal(Customer c, int amount){
	customer.c = c;
	customer.amount = amount;
	customer.state = withdrawal;
}

checkBalance(Customer c){
	customer.c = c;
	customer.state = check;
}

applyLoan(Customer c, int amount){
	customer.c = c;
	customer.amount = amount;
	customer.state = loan;
}

makePayment(Customer c, int amount){
	customer.c = c;
	customer.amount = amount;
	customer.state = payment;
}

openAccount(Customer c, int amount){
	customer = c;
	customer.amount = amount;
	customer.state = open;
}

robbery(Customer c, int amount){
	customer = c;
	customer.amount = amount;
	customer.state = robbery;
}


SCHEDULER
---------

if customer.state = deposit
	Deposit(customer);
if customer.state = withdrawal
	Withdrawal(customer);
if customer.state = check
	CheckBalance(customer);
if customer.state = loan;
	ProcessLoan(customer);
if customer.state = payment;
	MakePayment(customer);
if customer.state = open;
	OpenAccount(customer);
if customer.state = robbery
	Robbery(customer);

//place c.state=none after action call
//to avoid possible race conditions/recall

ACTIONS
-------

Deposit(myCustomer c){
	if there exists an account in accounts
	such that account.ID = c.c.ID:
		account.balance += c.amount;
		c.c.HereIsBalance(account.balance);
	else:
		c.c.AccountError();
	c.state = none;
}

Withdrawal(myCustomer c){
	if there exists an account in accounts
	such that account.ID = c.c.ID:
		if(account.balance>=c.amount):
			account.balance -= c.amount;
			c.c.HereIsBalance(account.balance, c.amount);
		else:
			c.c.HereIsBalance(account.balance, 0);
	else:
		c.c.AccountError();
	c.state = none;
}

CheckBalance(myCustomer c){
	if there exists an account in accounts
	such that account.ID = c.c.ID:
		c.c.HereIsBalance(account.balance);
	else:
		c.c.AccountError();
	c.state = none;
}

ProcessLoan(myCustomer c){
	if there exists an account in accounts
	such that account.ID = c.c.ID:
		if c.c.status > (riskThreshold) AND account.loan = 0:
			account.loan = c.amount;
			setTimer(c.c.HereIsLoan(account.loan, c.amount);
		else:
			setTimer(c.c.HereIsLoan(account.loan, 0);
	else:
		c.c.AccountError();
	c.state = none;
}
c
MakePayment(myCustomer c){
	if there exists an account in accounts
	such that account.ID = c.c.ID:
		account.loan -= c.amount;
		c.c.HereIsLoan(account.loan, 0);
	else:
		c.c.AccountError();
	c.state = none;
}

OpenAccount(myCustomer c){
	if there exists an account in accounts
	such that account.ID = c.c.ID:
		c.c.AccountError()
	else:
		accounts.add(new Account(c.c.name, c.c.ID, c.amount))
		c.c.HereIsBalance(account.balance)
	c.state = none;
}

Robbery(myCustomer c){
	c.c.HereIsBalance(null, c.amount);
	//essentially creates money out of nowhere
	//gives the robber the amount he/she wants
	//won't create inflation, criminal will be terminated
	if there exists an account in accounts
	such that account.ID = c.c.ID:
		accounts.remove(account)
	guard.robberAlert(c);
	c.state = none;
}
	