-----------------------------CUSTOMER----------------------------------------

DATA
----

/*
 *These variables are from the 
 *base Person which customer extends
int ID;
string name;
float status;
double cash;
*/

double loan;
double balance;
double transaction;

Map<String, double> actions;
/*Example: (Deposit, 34.23), (Withdraw, 12.23), (Loan, 3000.23)*/

State state;
{none, waiting, gotTeller, atTeller, received, error}

//Agent Correspondents//
Guard guard;
Teller teller;


MESSAGES
--------

GoToTeller(Teller t){
	this.teller = t;
	state = gotTeller;
}

atTeller(){
	//from gui
	state = atTeller;
}

HereIsBalance(double balance){
	this.balance = balance;
	state = received;
}

HereIsBalance(double balance, double transaction){
	this.balance = balance;	
	this.transaction = transaction;
	state = received;
}

HereIsLoan(double loan, double transaction)}
	this.loan = loan;
	this.transaction = transcation;
	state = received;
}

AccountError(){
	state = error;
}	


SCHEDULER
---------

if state = none:
	WaitInLine();
	state = waiting;
if state = gotTeller:
	doGoToTeller(t.location);
	state = waiting;
if state = atTeller:
	if actions.empty():
		Leave();
	else:
		initiateTransaction();
		state = waiting;
if state = received:
	processTransaction();
	state = atTeller;
if state = error:
	processError();
	state = atTeller;

ACTIONS
-------

WaitInLine(){
	guard.needService(this);
}

Leave(){
	//gui doLeave();
}

initiateTransaction(){
	action = actions[0].key   (string)
	amount = actions[0].value (double)
	//implement with switch/case statement//
	if action = deposit:
		teller.deposit(this, amount);
	elif action = withdrawal:
		teller.withdrawal(this, amount);
	elif action = check:
		teller.checkBalance(this);
	elif action = loan:
		teller.applyLoan(this, amount);
	elif action = payment:
		teller.makePayment(this, amount);
	elif action = open:
		teller.openAccount(this, amount);
	elif action = robbery:
		teller.robbery(this.amount);
}
		
processTransaction(){
	action = actions[0].key   (string)
	amount = actions[0].value (double)
	*actions.remove(top)*
	//implement with switch/case statement//
	if action = deposit:
		cash -= amount;
	elif action = withdrawal:
		cash += transaction;
		if(transaction = 0):
			//that means not enough funds
			//what to do?? new action??
		else:
			//withdrawal successful
	elif action = check:
		//no need for action, balance is updated
	elif action = loan:
		cash += transaction;
		if(transaction = 0):
			//that means loan rejected
			//what to do?? new action??
		else:
			//loan successful
	elif action = payment:
		//no need for action, loan is updated
	elif action = open:
		cash -= amount;
	elif action = robbery:
		cash += amount;
}

processError(){
	//what to do??
	action = actions[0].key   (string)
	amount = actions[0].value (double)
	if action = open
		//account already opened
	else:
		//acount not open yet
		//open account first?
		//insert (open, depValue) into actions?
}