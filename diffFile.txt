diff --git a/src/city/gui/SimCityGui.java b/src/city/gui/SimCityGui.java
index bf22e95..95ffa53 100644
--- a/src/city/gui/SimCityGui.java
+++ b/src/city/gui/SimCityGui.java
@@ -13,7 +13,7 @@ import base.Time;
 
 @SuppressWarnings("serial")
 public class SimCityGui extends JFrame {
-	public static boolean TESTING = false;
+	public static boolean TESTING = true;
 
 	public static int TESTNUM = 2;
 	
diff --git a/src/restaurant/intermediate/RestaurantHostRole.java b/src/restaurant/intermediate/RestaurantHostRole.java
index ea2ab52..6130d13 100644
--- a/src/restaurant/intermediate/RestaurantHostRole.java
+++ b/src/restaurant/intermediate/RestaurantHostRole.java
@@ -54,7 +54,7 @@ public class RestaurantHostRole extends BaseRole implements
 			if(JerrywebRestaurant.host == null){
 				JerrywebRestaurant.host = (JerrywebHostRole) subRole;
 			} else {
-				subRole = MaggiyanRestaurant.mHost;
+				subRole = JerrywebRestaurant.host;
 			}
 			break;
 		case 3: // maggi
diff --git a/src/restaurant/intermediate/RestaurantWaiterRole.java b/src/restaurant/intermediate/RestaurantWaiterRole.java
index 58eb2bf..63d6386 100644
--- a/src/restaurant/intermediate/RestaurantWaiterRole.java
+++ b/src/restaurant/intermediate/RestaurantWaiterRole.java
@@ -78,7 +78,8 @@ public class RestaurantWaiterRole extends BaseRole implements
 				JerrywebRestaurant.addPerson((JerrywebWaiterRole) subRole);
 			} else if (mWaiterType == 0) {
 				subRole = new JerrywebRSWaiterRole(super.mPerson);
-				JerrywebRestaurant.addPerson((JerrywebRSWaiterRole) subRole);
+				//JerrywebRestaurant.addPerson((JerrywebRSWaiterRole) subRole);
+				JerrywebRestaurant.addRSWaiter((JerrywebRSWaiterRole) subRole);
 			}
 			break;
 		case 3: // maggi
diff --git a/src/restaurant/restaurant_jerryweb/CookRole.java b/src/restaurant/restaurant_jerryweb/CookRole.java
deleted file mode 100644
index 9d538dd..0000000
--- a/src/restaurant/restaurant_jerryweb/CookRole.java
+++ /dev/null
@@ -1,329 +0,0 @@
-package restaurant.restaurant_jerryweb;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.ConcurrentModificationException;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Timer;
-import java.util.TimerTask;
-import java.util.concurrent.Semaphore;
-
-import restaurant.restaurant_jerryweb.agent.Agent;
-import restaurant.restaurant_jerryweb.gui.Menu;
-import restaurant.restaurant_jerryweb.interfaces.Market;
-import restaurant.restaurant_jerryweb.interfaces.Waiter;
-
-/**
- * Restaurant Cook Agent
- */
-public class CookRole extends Agent {
-	static final int semaphoreCerts = 0;
-	public List<Order> Orders= Collections.synchronizedList(new ArrayList<Order>());
-	public List<Order>  RevolvingStandOrders = Collections.synchronizedList(new ArrayList<Order>());
-	public List<Food> foodItems= new ArrayList<Food>();
-	Timer cookingTimer = new Timer();
-	private Timer checkRevolvingStand = new Timer();
-	public List<WaiterRole> Waiters = new ArrayList<WaiterRole>();
-	public Menu m = new Menu();
-	public Map<String,Food> foodMap = new HashMap<String,Food>(4);	
-	public List<Market> markets = new ArrayList<Market>();
-	int selection = 0; 
-	private boolean orderSent = false;
-	
-	
-	public class Order{
-		Waiter w;
-		
-		String choice;
-		int table;
-		OrderState s;
-		public Order(Waiter waiter, String custOrder, int t, OrderState orderS){
-			w = waiter;
-			choice = custOrder;
-			table = t;
-			s = orderS;
-		}
-		
-		/*public Order(RSWaiterRole2 waiter, String custOrder, int t, OrderState orderS){
-			w = waiter;
-			choice = custOrder;
-			table = t;
-			s = orderS;
-		}*/
-
-	}
-
-	public enum OrderState
-	{pending, cooking, done, waitingForWaiter, giveToWaiter, served, needToRestock, restocking}
-	
-	public class Food {
-		String type;
-		int cookingTimes;
-		int amount; 
-		int low;
-		int capacity;
-		FoodState s;
-
-		public Food(String foodType, FoodState state, int timeToCook, int cap, int quantity, int l){
-			type = foodType;
-			cookingTimes = timeToCook;
-			amount = quantity; 
-			low = l;
-			capacity = cap;
-			s = state;
-		}
-	}
-	
-	public enum FoodState
-	{ordered, delivered}
-	
-	private String name;
-	private Semaphore atTable = new Semaphore(semaphoreCerts,true);
-
-	//public HostGui hostGui = null;
-
-	public CookRole(String name) {
-		super();
-		this.name = name;
-
-		//This populates the food map using the string names of the food items as keys and holds the
-		foodMap.put("steak",new Food("steak", FoodState.delivered, 17000, 5, 5, 2));
-		foodMap.put("chicken",new Food("chicken", FoodState.delivered, 12000, 7, 7, 3));
-		foodMap.put("salad",new Food("salad", FoodState.delivered, 2000, 10, 10, 4));
-		foodMap.put("pizza",new Food("pizza", FoodState.delivered, 14000, 8, 3, 3));
-		
-		checkRevolvingStand.schedule(new TimerTask() {
-			public void run() {
-				
-				moveRevlovingStandOrders();
-				stateChanged();
-			}
-		},
-		25000);
-	}
-
-	public String getMaitreDName() {
-		return name;
-	}
-
-	public String getName() {
-		return name;
-	}
-	
-	public void addWaiter(WaiterRole w){
-		Waiters.add(w);
-	}
-
-	
-
-
-	// Messages
-	public void msgOutOfStock(Market market, String choice){
-		synchronized(Orders){
-		for(int i=0; i<Orders.size(); i++){
-			if(Orders.get(i).choice.equals(choice) && Orders.get(i).s == OrderState.needToRestock){
-				
-				if(selection == 2){
-					//print("Iterated through all the markets...");
-					selection = 0;
-				}
-				selection++;
-				//Orders.remove(i);
-				
-			}
-		}
-		}
-		stateChanged();
-	}
-	
-	public void msgHereIsOrder(String choice, Map<String, Food> fm){
-		synchronized(Orders){
-		for(int i=0; i<Orders.size(); i++){
-			if(Orders.get(i).choice.equals(choice) && Orders.get(i).s == OrderState.restocking){
-				foodMap = fm;
-				//print("Steak amount is now: " + foodMap.get("steak").amount);
-				Orders.remove(i);
-				stateChanged();
-				orderSent = false;
-				break;
-			}
-		}
-		}
-	}
-	
-	public void msgCookThis(WaiterRole w, String choice, int table){
-		//Orders.choice = m.menuItems.get(choice);
-		if(choice.equals("nothing")){
-			//print("No");
-		}
-		else{ 
-			Orders.add(new Order(w, choice, table, OrderState.pending));
-			
-		stateChanged();}
-		
-	}
-
-
-	public void msgfoodDone(Order order){
-		
-		order.s = OrderState.done;
-		stateChanged();
-	}
-	
-	public void msgGiveMeOrder(int t){
-		synchronized(Orders){
-		for(int i=0; i<Orders.size(); i++){
-			if(Orders.get(i).table == t){
-				Orders.get(i).s = OrderState.giveToWaiter;
-				stateChanged();
-			}
-		}
-		}
-	}
-	/**
-	 * Scheduler.  Determine what action is called for, and do it.
-	 */
-	protected boolean pickAndExecuteAnAction() {
-		try{
-		for(int i=0; i<Orders.size(); i++){
-			if(Orders.get(i).s == OrderState.needToRestock){
-				OrderFood(i);
-				return true;
-			}
-		
-		}
-		
-
-		
-		for(int i=0; i<Orders.size(); i++){
-			if(Orders.get(i).s == OrderState.pending){
-				TryToCookIt(Orders.get(i), i);
-				return true;
-			}
-		
-		}
-		
-		for(int i=0; i<Orders.size(); i++){
-			if(Orders.get(i).s == OrderState.done){
-				plateIt(Orders.get(i));
-				return true;
-			}
-		}
-		
-		for(int i=0; i<Orders.size(); i++){
-			if(Orders.get(i).s == OrderState.giveToWaiter){
-				giveFoodToWaiter(Orders.get(i), i);//cookIt(Orders.get(i));
-				return true;
-			}
-		
-		}
-		
-		checkInventory();//comment this out to prevent the cook from checking his inventory
-		return false;
-		}
-		catch (ConcurrentModificationException e) {
-			
-			return false;
-		}
-	}
-
-	// Actions
-	
-	public void moveRevlovingStandOrders(){
-		for(int i = 0; i < RevolvingStandOrders.size(); i++){
-			Orders.add(RevolvingStandOrders.get(i));
-			
-		}
-	}
-	
-	public void checkInventory(){//This checks the inventory while the waiter is idle
-		//print("my inventory " + foodMap.foodMap.get("steak").amount)
-		for(int i = 0; i <4; i++){
-			if(foodMap.get(m.menuItems.get(i)).amount <= foodMap.get(m.menuItems.get(i)).low){
-				//markets.get(selection).msgGiveMeOrder(m.menuItems.get(i), foodMap);
-				break;
-			}
-
-		}
-		if(selection == 2){
-			selection = 0;
-		}
-		selection++;
-	}
-	
-	public void OrderFood(int x){
-		if(!orderSent){
-			orderSent = true;
-			//markets.get(selection).msgGiveMeOrder(Orders.get(x).choice, foodMap);
-			Orders.get(x).s = OrderState.restocking;
-		//Orders.remove(x);
-			//print("Ordering food");
-		}
-	}
-	
-	private void plateIt(Order order) {
-		//print("" + order.choice + " is ready");
-		order.w.msgOrderReady(order.choice, order.table);	
-		order.s = OrderState.waitingForWaiter;
-	}
-
-	public void giveFoodToWaiter(Order order, int x){
-		//print("Here is the " + order.choice + " for table " + order.table);
-		order.s = OrderState.served;
-		order.w.msgTakeFood(order.choice, order.table);
-	}
-	
-	public void TryToCookIt(Order order, int orderLocation){
-		if(foodMap.get(order.choice).amount == 0){
-			//print("Removing order " + Orders.get(orderLocation).choice);
-			Orders.get(orderLocation).w.msgOutOfFood(Orders.get(orderLocation).choice, Orders.get(orderLocation).table);
-			Orders.get(orderLocation).s = OrderState.needToRestock;
-			//Orders.remove(orderLocation);
-		}
-		
-		else{
-			//print("Alright " + Orders.get(orderLocation).choice + " coming up!");
-			int cookTime = 0;
-			final int  orderLocationFinal = orderLocation;
-		
-			//cookTime = foodMap.get(Orders.get(orderLocationFinal).choice).cookingTimes;
-			cookTime = foodMap.get(order.choice).cookingTimes;
-
-			//print("cook time is: " + cookTime);
-			//foodMap.get(Orders.get(orderLocationFinal).choice).amount = foodMap.get(Orders.get(orderLocationFinal).choice).amount - 1;
-			foodMap.get(order.choice).amount = foodMap.get(order.choice).amount - 1;
-
-			cookingTimer.schedule(new TimerTask() {
-				public void run() {
-					//DoCooking(order); // animation for cooking
-					cookingTimes(orderLocationFinal);
-					}
-				},
-				cookTime);
-			Orders.get(orderLocationFinal).s = OrderState.cooking;
-			//foodMap.get(Orders.get(orderLocation)
-		}
-	}
-	
-	public void cookingTimes(final int orderLoc){//calls the food done message to change the state of the corresponding order
-		//print("the ordering list is of size: " + Orders.size());
-		this.msgfoodDone(Orders.get(orderLoc));
-		
-	}
-	// The animation DoXYZ() routines
-	
-
-	//utilities
-	
-	public void addToRevolvingStand(Waiter w,String custOrder, int t, OrderState orderS){
-		RevolvingStandOrders.add(new Order(w, custOrder,  t, orderS));
-	}
-	
-	public void addMarket(Market market){
-		//print("Adding " + market.getName());
-		markets.add(market);
-	}
-
-}
\ No newline at end of file
diff --git a/src/restaurant/restaurant_jerryweb/CustomerRole.java b/src/restaurant/restaurant_jerryweb/CustomerRole.java
deleted file mode 100644
index fce622f..0000000
--- a/src/restaurant/restaurant_jerryweb/CustomerRole.java
+++ /dev/null
@@ -1,488 +0,0 @@
-package restaurant.restaurant_jerryweb;
-
-import java.util.Random;
-import java.util.Timer;
-import java.util.TimerTask;
-
-import restaurant.restaurant_jerryweb.agent.Agent;
-import restaurant.restaurant_jerryweb.gui.CustomerGui;
-import restaurant.restaurant_jerryweb.gui.Menu;
-import restaurant.restaurant_jerryweb.interfaces.Customer;
-import restaurant.restaurant_jerryweb.interfaces.Waiter;
-
-/**
- * Restaurant customer agent.
- */
-public class CustomerRole extends Agent implements Customer {
-	
-	int tableN;
-	private String name;
-	private int hungerLevel = 5;        // determines length of meal
-	Timer timer = new Timer();
-	private CustomerGui customerGui;
-	public double cash = 0;
-	public Menu m = new Menu();
-	// agent correspondents
-	private HostRole host;
-	private Waiter waiter;
-	private CashierRole cashier;
-	private boolean hasCheck = false;
-	
-	public int QuePosX = 0;
-	public int QuePosY = 0;
-	
-	//    private boolean isHungry = false; //hack for gui
-	public enum AgentState
-	{DoingNothing, WaitingInRestaurant, BeingSeated, Seated, readingMenu, readyToOrder, waitingForFood, readyToEat, preparingToEat, Eating, DoneEating, goingToPaying, paying, Leaving};
-	private AgentState state = AgentState.DoingNothing;//The start state
-
-	public enum AgentEvent 
-	{none, gotHungry, followWaiter, seated, reading, ordering, outOfChoice, ordered, recievedFood, doneEating,  recievedChange, payCashier,  doneLeaving};
-	AgentEvent event = AgentEvent.none;
-
-	/**
-	 * Constructor for CustomerAgent class
-	 *
-	 * @param name name of the customer
-	 * @param gui  reference to the customergui so the customer can send it messages
-	 */
-	public CustomerRole(String name){
-		super();
-		this.name = name;
-		if(!name.equals("flake")){
-			if(name.equals("5")){
-				cash = 5;
-			}
-			else if(name.equals("10")){
-				cash = 10;
-			}
-			else if(name.equals("15")){
-				cash = 15;
-			}
-			else{
-				cash = 20;}
-		}
-		else{ cash = 0;}
-	}
-
-	/**
-	 * hack to establish connection to Host agent.
-	 */
-	public void setHost(HostRole host) {
-		
-		this.host = host;
-	}
-	
-	public void setCashier(CashierRole cashier){
-		this.cashier = cashier;
-	}
-
-	public String getCustomerName() {
-		return name;
-	}
-	// Messages
-
-	public void gotHungry() {//from animation
-		////print("I'm hungry");
-		event = AgentEvent.gotHungry;
-		stateChanged();
-	}
-	
-	public void msgWaitInQue(int positionNumber){
-		if(positionNumber == 0){
-			customerGui.xDestination = 20;
-			customerGui.yDestination = 120;
-		}
-		
-		if(positionNumber == 1){
-			customerGui.xDestination = 20;
-			customerGui.yDestination = 98;
-		}
-		
-		if(positionNumber == 2){
-			customerGui.xDestination = 20;
-			customerGui.yDestination = 86;
-		}
-		
-		if(positionNumber == 3){
-			customerGui.xDestination = 20;
-			customerGui.yDestination = 64;
-		}
-		
-		if(positionNumber == 4){
-			customerGui.xDestination = 20;
-			customerGui.yDestination = 42;
-		}
-		
-		if(positionNumber == 5){
-			customerGui.xDestination = 20;
-			customerGui.yDestination = 20;
-		}
-	}
-
-	public void msgSitAtTable(int tableNumber, Menu m, Waiter w) {
-		customerGui.customerString = "";
-		////print("I have " + cash + " dollars.");
-		this.waiter = w;
-		tableN = tableNumber;
-		////print("Received msgSitAtTable");
-		
-		event = AgentEvent.followWaiter;
-		stateChanged();
-	}
-	
-	public void msgWhatDoYouWant(){
-		event = AgentEvent.ordering;
-		stateChanged();
-		
-	}
-	
-	public void msgOrderNotAvailable(String choice){
-		event = AgentEvent.outOfChoice;
-		//print("My state is: " + this.state);		
-		//print("Ok I won't order " + choice);
-		m.menuItems.remove(choice);
-		
-		stateChanged();
-	}
-	
-	public void msgHereIsYourFood(){
-		//print("Thank You");
-		event = AgentEvent.recievedFood;
-		stateChanged();
-	}
-
-	public void msgAnimationFinishedGoToSeat() {
-		//from animation
-		event = AgentEvent.seated;
-		stateChanged();
-	}
-	
-	
-	public void msgAnimationFinishedLeaveRestaurant() {
-		//from animation
-		event = AgentEvent.doneLeaving;
-		stateChanged();
-	}
-	
-	public void msgHereIsCheck(){
-		//print("thanks for check");
-		hasCheck = true;
-		stateChanged();
-	}
-	public void msgAnimationFinishedGoToCashier(){
-			event = AgentEvent.payCashier;
-			stateChanged();
-	}
-	public void msgHereIsChange(double change){
-		//print("Thank you for the change");
-		cash = change;
-		event = AgentEvent.recievedChange;
-		stateChanged();
-	}
-
-	/**
-	 * Scheduler.  Determine what action is called for, and do it.
-	 */
-	protected boolean pickAndExecuteAnAction() {
-		//	CustomerAgent is a finite state machine
-		////print(""+ state);
-		if (state == AgentState.DoingNothing && event == AgentEvent.gotHungry ){
-			state = AgentState.WaitingInRestaurant;
-			goToRestaurant();
-			return true;
-		}
-		if (state == AgentState.WaitingInRestaurant && event == AgentEvent.followWaiter ){
-			state = AgentState.BeingSeated;
-			SitDown(m);
-			return true;
-		}
-		
-		if (state == AgentState.BeingSeated && event == AgentEvent.seated){
-			state = AgentState.readingMenu;
-			readMenu();
-			return true;
-		}
-		if (state == AgentState.preparingToEat && event == AgentEvent.outOfChoice){
-			state = AgentState.readyToOrder;
-			callWaiter();
-			return true;
-		}
-		if (state == AgentState.readingMenu && event == AgentEvent.reading){
-			state = AgentState.readyToOrder;
-			callWaiter();
-			return true;
-		}
-		
-		if (state == AgentState.readyToOrder && event == AgentEvent.ordering){
-			state = AgentState.waitingForFood;
-			pickMeal(m);
-			return true;
-		}
-		
-		if (state == AgentState.waitingForFood && event == AgentEvent.ordered){
-			state = AgentState.readyToEat;
-			preparingToEat();
-			return true;
-		}
-		
-		if (state == AgentState.preparingToEat && event == AgentEvent.recievedFood){
-			state = AgentState.Eating;
-			ThankWaiter();
-			EatFood();
-			return true;
-		}
-
-		
-		 if(state == AgentState.Eating && event == AgentEvent.doneEating && hasCheck){
-		  	state = AgentState.goingToPaying;
-		  	goToCashier();
-		  	return true;
-		 }
-		
-		if (state == AgentState.goingToPaying && event == AgentEvent.payCashier){
-			state = AgentState.paying;
-			pay();
-			return true;
-		}
-			
-		
-		 if(state == AgentState.paying && event == AgentEvent.recievedChange){
-		  	state = AgentState.Leaving;
-		  	leaveTable();
-		  	return true;
-		 }
-		 
-		if (state == AgentState.Leaving && event == AgentEvent.doneLeaving){
-			state = AgentState.DoingNothing;
-			//no action
-			return true;
-		}
-		return false;
-	}
-
-	// Actions
-	/*public void ThankWaiter(){
-		waiter.msgRecievedFood();
-	}*/
-	private void goToRestaurant() {
-		Do("Going to restaurant");
-		host.msgIWantFood(this);//send our instance, so he can respond to us
-		//waiter.msgIWantFood(this);
-	}
-
-	private void SitDown(Menu m) {
-		Do("Being seated. Going to table");
-		
-		customerGui.DoGoToSeat(tableN);
-	}
-	public void goToCashier(){
-		Do("PayForMeal");
-		customerGui.DoPayForMeal();
-	}
-	
-	public void pay(){
-		//print("paying");
-		timer.schedule(new TimerTask() {
-			public void run() {
-				////print("What do I want ");
-				
-				Paid();
-			}
-		},
-		1000);
-	
-	}
-	
-	public void Paid(){
-		cashier.msgPayment(this, cash);
-		hasCheck = false;
-	}
-	private void EatFood() {
-		Do("Eating Food");
-		//This next complicated line creates and starts a timer thread.
-		//We schedule a deadline of getHungerLevel()*1000 milliseconds.
-		//When that time elapses, it will call back to the run routine
-		//located in the anonymous class created right there inline:
-		//TimerTask is an interface that we implement right there inline.
-		//Since Java does not all us to pass functions, only objects.
-		//So, we use Java syntactic mechanism to create an
-		//anonymous inner class that has the public method run() in it.
-		timer.schedule(new TimerTask() {
-			
-			public void run() {
-				////print("Done eating, cookie=" + cookie);
-				event = AgentEvent.doneEating;
-				//isHungry = false;
-				stateChanged();
-			}
-		},
-		5000);//getHungerLevel() * 1000);//how long to wait before running task
-	}
-
-	private void leaveTable() {
-		Do("Leaving.");
-		waiter.msgLeavingTable(this);
-		customerGui.DoExitRestaurant();
-	}
-	
-	public void readMenu(){
-		timer.schedule(new TimerTask() {
-			public void run() {
-				////print("What do I want ");
-				event = AgentEvent.reading;
-				
-				stateChanged();
-			}
-		},
-		5000);
-		
-	}
-	
-	public void callWaiter(){
-		//print("WAITER!");
-		customerGui.customerString = "?";
-		waiter.msgReadyToOrder(this);
-		
-	}
-	
-	//This notifies the waiter that 
-	public void ThankWaiter(){
-		waiter.msgRecievedFood();
-	}
-	
-	public void pickMeal(Menu m){
-		
-		timer.schedule(new TimerTask() {
-			public void run() {
-				givingOrder();
-			}
-		},
-		1000);
-		//givingOrder();
-	}
-	//This method gives the allusion that the customer is telling his order to the waiter within a time period that would 
-	//otherwise be instantaneous 
-	public void givingOrder(){
-		if(this.getName().equals("steak") && cash >= 15.99){
-			 waiter.msgHereIsMyOrder(this, m.menuItems.get(3));
-			 //print("Give me the " + m.menuItems.get(3));
-			 event = AgentEvent.ordered;
-			 stateChanged();
-		}
-		else if(this.getName().equals("chicken") && cash >= 10.99){
-			 waiter.msgHereIsMyOrder(this, m.menuItems.get(2));
-			 //print("Give me the " + m.menuItems.get(2));
-			 event = AgentEvent.ordered;
-			 stateChanged();
-		}
-		else if(this.getName().equals("salad") && cash >= 5.99 ){
-			 waiter.msgHereIsMyOrder(this, m.menuItems.get(0));
-			 //print("Give me the " + m.menuItems.get(0));
-			 event = AgentEvent.ordered;
-			 stateChanged();
-		}
-		else if(this.getName().equals("pizza") && cash >= 8.99){
-			 waiter.msgHereIsMyOrder(this, m.menuItems.get(1));
-			 //print("Give me the " + m.menuItems.get(1));
-			 event = AgentEvent.ordered;
-			 stateChanged();
-		}
-		else{
-			if(cash < 15.99){
-				m.menuItems.remove("steak");
-				if(cash < 10.99){
-					m.menuItems.remove("chicken");
-					if(cash < 8.99){
-						m.menuItems.remove("pizza");
-					}
-				}
-			}
-			Random rand = new Random(System.currentTimeMillis());
-			int selection = rand.nextInt(m.menuItems.size());
-		 	if(selection == 3  && cash >= 15.99|| this.getName().equals("flake")){
-		 		waiter.msgHereIsMyOrder(this, m.menuItems.get(selection));
-		 		//print("Give me the " + m.menuItems.get(selection));
-		 		event = AgentEvent.ordered;
-		 		//state = AgentState.waitingForFood;
-				customerGui.customerString = "";
-				stateChanged();
-		 	}
-		 	
-		 	else if(selection == 2 && cash >= 10.99 || this.getName().equals("flake")){
-		 		waiter.msgHereIsMyOrder(this, m.menuItems.get(selection));
-		 		 //print("Give me the " + m.menuItems.get(selection));
-		 		event = AgentEvent.ordered;
-		 		//state = AgentState.waitingForFood;
-				customerGui.customerString = "";
-				stateChanged();
-		 	}
-
-		 	
-		 	else if(selection == 1 && cash >= 8.99 || this.getName().equals("flake")){
-		 		waiter.msgHereIsMyOrder(this, m.menuItems.get(selection));
-		 		 //print("Give me the " + m.menuItems.get(selection));
-		 		event = AgentEvent.ordered;
-		 		//state = AgentState.waitingForFood;
-				customerGui.customerString = "";
-				stateChanged();
-		 	}	
-		 	else if(selection == 0 && cash >= 5.99 || this.getName().equals("flake")){
-		 		waiter.msgHereIsMyOrder(this, m.menuItems.get(selection));
-		 		 //print("Give me the " + m.menuItems.get(selection));
-		 		event = AgentEvent.ordered;
-		 		 //state = AgentState.waitingForFood;
-				customerGui.customerString = "";
-				stateChanged();
-		 	}
-		 	else if(cash <= 5.99){ 
-			  //print("I can't afford anything");
-			  event = AgentEvent.recievedChange;
-			  state = AgentState.paying;
-			  waiter.msgHereIsMyOrder(this, "nothing");
-			  customerGui.customerString = "I'm broke!";
-			  stateChanged();
-		 	}
-		 	else{ givingOrder();}
-			}
-		customerGui.customerString = "";
-	}
-	
-	public void preparingToEat(){
-		state = AgentState.preparingToEat;
-		stateChanged();
-	}
-
-	// Accessors, etc.
-
-	public String getName() {
-		return name;
-	}
-	
-	public double getCash(){
-		return cash;
-	}
-	public int getHungerLevel() {
-		return hungerLevel;
-	}
-
-	public void setHungerLevel(int hungerLevel) {
-		this.hungerLevel = hungerLevel;
-		//could be a state change. Maybe you don't
-		//need to eat until hunger lever is > 5?
-	}
-
-	public String toString() {
-		return "customer " + getName();
-	}
-
-	public void setGui(CustomerGui g) {
-		customerGui = g;
-		
-	}
-
-	public CustomerGui getGui() {
-		return customerGui;
-	}
-}
-
diff --git a/src/restaurant/restaurant_jerryweb/HostRole.java b/src/restaurant/restaurant_jerryweb/HostRole.java
deleted file mode 100644
index 19ea210..0000000
--- a/src/restaurant/restaurant_jerryweb/HostRole.java
+++ /dev/null
@@ -1,344 +0,0 @@
-package restaurant.restaurant_jerryweb;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.ConcurrentModificationException;
-import java.util.List;
-import java.util.concurrent.Semaphore;
-
-import restaurant.restaurant_jerryweb.agent.Agent;
-import restaurant.restaurant_jerryweb.gui.HostGui;
-import restaurant.restaurant_jerryweb.interfaces.Customer;
-import restaurant.restaurant_jerryweb.interfaces.Waiter;
-
-/**
- * Restaurant Host Agent
- */
-//We only have 2 types of agents in this prototype. A customer and an agent that
-//does all the rest. Rather than calling the other agent a waiter, we called him
-//the HostAgent. A Host is the manager of a restaurant who sees that all
-//is proceeded as he wishes.
-public class HostRole extends Agent {
-	static final int NTABLES = 3;//a global for the number of tables.
-	//Notice that we implement Customers using ArrayList, but type it
-	//with List semantics.
-	static final int semaphoreCerts = 0;
-	//public List<Customer> Customers= new ArrayList<Customer>();
-	public List<MyCustomer> theCustomers = Collections.synchronizedList(new ArrayList<MyCustomer>());
-	//public List<MyCustomer> 
-	//Allows the host to keep track of all of the waiters in the 
-	public List<MyWaiter> Waiters = Collections.synchronizedList(new ArrayList<MyWaiter>());
-	
-	public Collection<Table> tables;
-	//note that tables is typed with Collection semantics.
-	//Later we will see how it is implemented
-	
-	int selection = 0;
-	
-	
-	/*In order to distribute customers across the waiters, I created a MyWaiter class, which is modeled off of the MyCustomers class.
-	 *The MyWaiters class only holds the two variables needed to discern which waiter is available to seat customers. As long as the waiter
-	 *is not already seating customers, he/she will be in the 'free' state, and available to seat any addtional customers. 
-	 */
-	public class MyWaiter{
-		
-		Waiter w;
-		WaiterState ws;
-		
-		public MyWaiter(Waiter waiter, WaiterState state) {
-			w = waiter;
-			ws = state;		
-		}
-		
-		public Waiter getWaiter(){
-			return w;
-		}
-
-
-	}
-
-	public enum WaiterState
-	{free, seatingCustomer, wantToGoOnBreak, onBreak}
-
-	public class MyCustomer{
-		
-		Customer c;
-		CustomerState s;
-		
-		public MyCustomer(Customer customer, CustomerState state) {
-			c = customer;
-			s = state;		
-		}
-
-
-	}
-
-	public enum CustomerState
-	{waiting, seated, doneEating}
-	
-	private String name;
-	private Semaphore atTable = new Semaphore(semaphoreCerts,true);
-
-	public HostGui hostGui = null;
-
-	public HostRole(String name) {
-		super();
-		
-		this.name = name;
-		// make some tables
-		tables = new ArrayList<Table>(NTABLES);
-		for (int ix = 1; ix <= NTABLES; ix++) {
-			tables.add(new Table(ix));//how you add to a collections
-		}
-	}
-
-	public String getMaitreDName() {
-		return name;
-	}
-
-	public String getName() {
-		return name;
-	}
-	
-	public void addWaiter(Waiter w){
-		Waiters.add(new MyWaiter(w, WaiterState.free));
-		print("Added waiter " + w.getName());
-		print("" + Waiters.size());
-		stateChanged();
-	}
-
-	public Collection getTables() {
-		return tables;
-	}
-	// Messages
-
-	public void msgIWantFood(Customer customer) {
-		//Customers.add(customer);
-		theCustomers.add(new MyCustomer(customer, CustomerState.waiting) );
-		int x = CustomerQue(customer);
-		customer.msgWaitInQue(x);
-		stateChanged();
-	}
-	
-	public void msgWantToGoOnBreak(Waiter Waiter){
-		int x = find(Waiter);
-		print("Waiter " + Waiters.get(x).w.getName() + " wants to go on break");
-		Waiters.get(x).ws = WaiterState.wantToGoOnBreak;
-		stateChanged();
-	}
-
-	
-	public void msgBackFromBreak(Waiter waiter){
-		int x = find(waiter);
-		Waiters.get(x).ws = WaiterState.free;
-		stateChanged();
-	}
-	
-	
-	
-	public void msgCustLeavingTable(Customer customer) {
-		synchronized(tables){
-		for (Table table : tables) {
-			if (table.getOccupant() == customer) {
-				print(customer + " leaving " + table);
-				table.setUnoccupied();
-				stateChanged();
-			}
-		}
-		}
-	}
-	
-	public void msgCustomerSeated(Waiter waiter){
-		synchronized(Waiters){	
-		for(int i = 0; i < Waiters.size(); i++){
-			if(Waiters.get(i).w.equals(waiter)){
-				Waiters.get(i).ws = WaiterState.free;
-				
-				stateChanged();
-			}
-		}
-		}
-	}
-	
-	
-	/**
-	 * Scheduler.  Determine what action is called for, and do it.
-	 */
-	protected boolean pickAndExecuteAnAction() {
-
-		try{
-		for(int j = 0; j < Waiters.size(); j++){
-			//print("" +Waiters.get(j).ws);
-			if(Waiters.get(j).ws == WaiterState.wantToGoOnBreak){
-				answerWaiter(Waiters.get(j));			
-	
-				return true;
-			}
-		}
-		
-		for (Table table : tables) {
-			
-			if (!table.isOccupied()) {
-				for(int i = 0; i < theCustomers.size(); i++){
-					if(theCustomers.get(i).s == CustomerState.waiting){
-						
-						AssignWaiter(theCustomers.get(i), table);//the action
-						return true;//return true to the abstract agent to reinvoke the scheduler.
-					}
-				}	
-				
-			}
-		}	
-		
-
-		return false;
-		}
-		
-		catch(ConcurrentModificationException e){
-			return false;
-		}
-		//we have tried all our rules and found
-		//nothing to do. So return false to main loop of abstract agent
-		//and wait.
-	}
-
-	// Actions
-	/*This is where the host will distribute the customers evenly amongst the waiters. Selection is an integer in that begins at one, and is incremented 
-	 * everytime a customer is assigned. The actual value of selection will determine which waiter is selected by picking th location of the waiter 
-	 * within the waiter list that matches the selection - 1 value. When selection reaches the maxium size of the waiter list, it will reset to one and the process will repeat.
-	 */
-	public void answerWaiter(MyWaiter waiter){
-		if(Waiters.size() >1){
-			print("" + waiter.w.getName() + " can go on break.");
-			waiter.w.msgCanGoOnBreak();
-			waiter.ws = WaiterState.onBreak;
-			stateChanged();
-		}
-		else{
-			print("" + waiter.w.getName() + " cannot go on break.");
-			waiter.ws = WaiterState.free;
-			stateChanged();
-		}
-		
-	}
-	
-	private void AssignWaiter(MyCustomer customer, Table table) {
-		
-		if(Waiters.size() == 0){
-				//print("There are no waiters here... Where are my waiters?!?! I hate my job.");
-			return;
-		}
-		else {
-			if(Waiters.get(selection).ws == WaiterState.onBreak){
-				//AssignWaiter(customer, table);
-			}
-			else{
-			Waiters.get(selection).w.msgPleaseSitCustomer(customer.c, table.tableNumber);
-			Waiters.get(selection).ws  = WaiterState.onBreak;
-			customer.s = CustomerState.seated;
-			table.setOccupant(customer.c);
-			synchronized(theCustomers){
-			for(int j = 0; j <theCustomers.size(); j++){
-				if(theCustomers.get(j).c.equals(customer.c)){
-					theCustomers.remove(j);
-				}
-			}}
-			}
-			selection++;
-			if(selection == Waiters.size()){
-				selection = 0;
-			}
-			
-			
-		}
-		
-		/*
-		for(int i = 0; i < Waiters.size(); i++){
-			if(Waiters.get(i).ws == WaiterState.free){
-				print("" +	Waiters.get(i).w.getName() + " please seat customer.");
-				Waiters.get(i).w.msgPleaseSitCustomer(customer.c, table.tableNumber);
-				customer.s = CustomerState.seated;
-				table.setOccupant(customer.c);
-				
-				Waiters.get(i).ws = WaiterState.seatingCustomer;
-				for(int j = 0; j <theCustomers.size(); j++){
-					if(theCustomers.get(j).c.equals(customer.c)){
-						theCustomers.remove(j);
-					}
-				}
-
-				
-				return;
-			}
-		}*/
-
-	}
-	
-	public void pausePrint(){
-		print("called");
-	}
-	// The animation DoXYZ() routines
-
-	//utilities
-
-	public int find(Waiter Waiter){
-		synchronized(Waiters){
-		for(int i = 0; i <Waiters.size(); i++){
-			if(Waiters.get(i).w.equals(Waiter)){
-				return i;
-			}
-		}
-		}
-		print("Can't find waiter in host find function!");
-		return 0;
-	}
-	
-
-	public void setGui(HostGui gui) {
-		hostGui = gui;
-	}
-
-	public HostGui getGui() {
-		return hostGui;
-	}
-	public int CustomerQue(Customer customer){
-		if(theCustomers.size() == 0){
-			return 0;
-		}
-		else{
-			return theCustomers.size() - 1;
-		}
-	}
-	
-	
-	private class Table {
-		Customer occupiedBy;
-		 int tableNumber;
-
-		Table(int tableNumber) {
-			this.tableNumber = tableNumber;
-		}
-
-		void setOccupant(Customer cust) {
-			occupiedBy = cust;
-		}
-
-		void setUnoccupied() {
-			occupiedBy = null;
-		}
-
-		Customer getOccupant() {
-			return occupiedBy;
-		}
-
-		boolean isOccupied() {
-			return occupiedBy != null;
-		}
-
-		public String toString() {
-			return "table " + tableNumber;
-		}
-	}
-}
-
diff --git a/src/restaurant/restaurant_jerryweb/JerrywebCashierRole.java b/src/restaurant/restaurant_jerryweb/JerrywebCashierRole.java
index 764dab3..e83654b 100644
--- a/src/restaurant/restaurant_jerryweb/JerrywebCashierRole.java
+++ b/src/restaurant/restaurant_jerryweb/JerrywebCashierRole.java
@@ -101,7 +101,7 @@ public class JerrywebCashierRole extends BaseRole implements Cashier {
 	public HostGui hostGui = null;
 
 	public JerrywebCashierRole(Person person, RestaurantCashierRole rcr) {
-		super(null);
+		super(person);
 		mRole = rcr;
 		 name = person.getName();
 		foodMap.put("steak",new Food("steak", FoodState.delivered, 17000, 5, 0, 15.99));
diff --git a/src/restaurant/restaurant_jerryweb/JerrywebCookRole.java b/src/restaurant/restaurant_jerryweb/JerrywebCookRole.java
index d72faff..7421cfb 100644
--- a/src/restaurant/restaurant_jerryweb/JerrywebCookRole.java
+++ b/src/restaurant/restaurant_jerryweb/JerrywebCookRole.java
@@ -34,7 +34,7 @@ public class JerrywebCookRole extends BaseRole {
 	//public Map<EnumItemType, Integer> mItemsDesired = new HashMap<EnumItemType, Integer>();
 	Timer cookingTimer = new Timer();
 	private Timer checkRevolvingStand = new Timer();
-	public List<JerrywebWaiterRole> Waiters = new ArrayList<JerrywebWaiterRole>();
+	public List<Waiter> Waiters = new ArrayList<Waiter>();
 	public Menu m = new Menu();
 	public Map<String,Food> foodMap = new HashMap<String,Food>(4);
 	public Map<EnumItemType,Integer> mCookTimes = new HashMap<EnumItemType, Integer>();
@@ -85,12 +85,10 @@ public class JerrywebCookRole extends BaseRole {
 	private String name;
 	private Semaphore atTable = new Semaphore(semaphoreCerts,true);
 
-	//public HostGui hostGui = null;
-
 	public JerrywebCookRole(Person p, RestaurantCookRole r){ 
 		super(p);
 		mRole = r;
-		//this.name = person.getName();
+		this.name = "JerrywebCook";
 
 		//This populates the food map using the string names of the food items as keys and holds the
 		/*foodMap.put("steak",new Food("steak", FoodState.delivered, 17000, 5, 5, 2));
@@ -102,15 +100,16 @@ public class JerrywebCookRole extends BaseRole {
         mCookTimes.put(EnumItemType.SALAD,2000);
         mCookTimes.put(EnumItemType.PIZZA,14000);
         
-		checkRevolvingStand.schedule(new TimerTask() {
-			public void run() {
-				
+        checkRevolvingStand.scheduleAtFixedRate(checkRS, 15000, 10000);
+	}
+	
+	TimerTask checkRS = new TimerTask(){
+		public void run(){
+			if(mPerson != null){
 				moveRevlovingStandOrders();
-//				stateChanged(); //JERRY: 1 Add this back in with your restaurant
 			}
-		},
-		25000);
-	}
+		}
+	};
 
 	public String getMaitreDName() {
 		return name;
@@ -120,7 +119,7 @@ public class JerrywebCookRole extends BaseRole {
 		return name;
 	}
 	
-	public void addWaiter(JerrywebWaiterRole w){
+	public void addWaiter(Waiter w){
 		Waiters.add(w);
 	}
 
@@ -161,7 +160,7 @@ public class JerrywebCookRole extends BaseRole {
 		}
 	}
 	
-	public void msgCookThis(JerrywebWaiterRole w, String choice, int table){
+	public void msgCookThis(Waiter w, String choice, int table){
 		//Orders.choice = m.menuItems.get(choice);
 		if(choice.equals("nothing")){
 			//print("No");
diff --git a/src/restaurant/restaurant_jerryweb/JerrywebCustomerRole.java b/src/restaurant/restaurant_jerryweb/JerrywebCustomerRole.java
index 1b3a66f..a9032e5 100644
--- a/src/restaurant/restaurant_jerryweb/JerrywebCustomerRole.java
+++ b/src/restaurant/restaurant_jerryweb/JerrywebCustomerRole.java
@@ -55,6 +55,8 @@ public class JerrywebCustomerRole extends BaseRole implements Customer {
 	public JerrywebCustomerRole(Person person){
 		super(person);
 		this.name = person.getName();
+		customerGui = new CustomerGui(this);
+		this.setGui(customerGui);
 		if(!name.equals("flake")){
 			if(name.equals("5")){
 				cash = 5;
@@ -69,13 +71,14 @@ public class JerrywebCustomerRole extends BaseRole implements Customer {
 				cash = 20;}
 		}
 		else{ cash = 0;}
+		this.gotHungry();
+		
 	}
 
 	/**
 	 * hack to establish connection to Host agent.
 	 */
 	public void setHost(JerrywebHostRole host) {
-		
 		this.host = host;
 	}
 	
@@ -95,35 +98,48 @@ public class JerrywebCustomerRole extends BaseRole implements Customer {
 	}
 	
 	public void msgWaitInQue(int positionNumber){
-		if(positionNumber == 0){
+		if(positionNumber > 6){
+			customerGui.xDestination = 20 + 22;
+			customerGui.yDestination = 20 + (positionNumber - 6)*22;
+		}
+		else{
+			customerGui.xDestination = 20;
+			customerGui.yDestination = 20 + positionNumber*22;
+			}
+		/*
+		if(positionNumber == 6){
+			customerGui.xDestination = 20;
+			customerGui.yDestination = 140;
+		}
+		if(positionNumber == 5){
 			customerGui.xDestination = 20;
 			customerGui.yDestination = 120;
 		}
 		
-		if(positionNumber == 1){
+		if(positionNumber == 4){
 			customerGui.xDestination = 20;
 			customerGui.yDestination = 98;
 		}
 		
-		if(positionNumber == 2){
+		if(positionNumber == 3){
 			customerGui.xDestination = 20;
 			customerGui.yDestination = 86;
 		}
 		
-		if(positionNumber == 3){
+		if(positionNumber == 2){
 			customerGui.xDestination = 20;
 			customerGui.yDestination = 64;
 		}
 		
-		if(positionNumber == 4){
+		if(positionNumber == 1){
 			customerGui.xDestination = 20;
 			customerGui.yDestination = 42;
 		}
 		
-		if(positionNumber == 5){
+		if(positionNumber == 0){
 			customerGui.xDestination = 20;
 			customerGui.yDestination = 20;
-		}
+		}*/
 	}
 
 	public void msgSitAtTable(int tableNumber, Menu m, Waiter w) {
@@ -273,7 +289,7 @@ public class JerrywebCustomerRole extends BaseRole implements Customer {
 	private void goToRestaurant() {
 		Do("Going to restaurant");
 		host.msgIWantFood(this);//send our instance, so he can respond to us
-		//waiter.msgIWantFood(this);
+		
 	}
 
 	private void SitDown(Menu m) {
@@ -479,6 +495,10 @@ public class JerrywebCustomerRole extends BaseRole implements Customer {
 		//could be a state change. Maybe you don't
 		//need to eat until hunger lever is > 5?
 	}
+	
+	public JerrywebHostRole getHost(){
+		return host;
+	}
 
 	public String toString() {
 		return "customer " + getName();
diff --git a/src/restaurant/restaurant_jerryweb/JerrywebRestaurant.java b/src/restaurant/restaurant_jerryweb/JerrywebRestaurant.java
index c47866f..ce806e1 100644
--- a/src/restaurant/restaurant_jerryweb/JerrywebRestaurant.java
+++ b/src/restaurant/restaurant_jerryweb/JerrywebRestaurant.java
@@ -30,21 +30,32 @@ public class JerrywebRestaurant {
 		guis = Collections.synchronizedList(new ArrayList<Gui>());
 		
 	}
+	public static void addRSWaiter(JerrywebRSWaiterRole role){
+		WaiterGui gui = new WaiterGui((Waiter) role, host);
+		((JerrywebRSWaiterRole) role).setGui(gui);
+		guis.add(gui);
+		JerrywebRSWaiterRole rswaiter = (JerrywebRSWaiterRole) role;
+		rswaiter.setHost(host);
+		rswaiter.setCook(cook);
+		rswaiter.setCashier(cashier);
+		//JerrywebHostRole host = rswaiter.getHost();
+		host.addWaiter((JerrywebRSWaiterRole)rswaiter);
+		NumOfWatiers++;
+	}
 	
 	public static void addPerson(BaseRole role){
     	if (role instanceof JerrywebCustomerRole){
-    		CustomerGui gui = new CustomerGui((JerrywebCustomerRole) role);
-    		//((JerrywebCustomerRole) role).setGui(gui);
-    		guis.add(gui);
+    		//CustomerGui gui = new CustomerGui((JerrywebCustomerRole) role);
     		JerrywebCustomerRole customer = (JerrywebCustomerRole) role;
-    		customer.setGui(gui);
-    		
+    		CustomerGui gui = new CustomerGui(customer);
+    		guis.add(gui);
     		customer.setHost(host);
+    		//JerrywebHostRole host = customer.getHost();
     		customer.setCashier(cashier);
-    		customer.gotHungry();
+    		//customer.gotHungry();
     		customers.add(customer);
-    		
-    		
+    		customer.setGui(gui);
+    		gui.setHungry();
     		NumOfCustomers++;
     	}
     	else if (role instanceof JerrywebWaiterRole){
@@ -53,7 +64,9 @@ public class JerrywebRestaurant {
     		guis.add(gui);
     		JerrywebWaiterRole waiter = (JerrywebWaiterRole) role;
     		waiter.setHost(host);
-    		JerrywebHostRole host = waiter.getHost();
+    		waiter.setCook(cook);
+    		waiter.setCashier(cashier);
+    		//JerrywebHostRole host = waiter.getHost();
     		host.addWaiter((JerrywebWaiterRole)waiter);
     		NumOfWatiers++;
     	}
@@ -63,7 +76,8 @@ public class JerrywebRestaurant {
     		guis.add(gui);
     		JerrywebRSWaiterRole rswaiter = (JerrywebRSWaiterRole) role;
     		rswaiter.setHost(host);
-    		JerrywebHostRole host = rswaiter.getHost();
+    		rswaiter.setCook(cook);
+    		//JerrywebHostRole host = rswaiter.getHost();
     		host.addWaiter((JerrywebRSWaiterRole)rswaiter);
     		NumOfWatiers++;
     	}
diff --git a/src/restaurant/restaurant_jerryweb/MarketRole.java b/src/restaurant/restaurant_jerryweb/MarketRole.java
deleted file mode 100644
index 4438266..0000000
--- a/src/restaurant/restaurant_jerryweb/MarketRole.java
+++ /dev/null
@@ -1,234 +0,0 @@
-package restaurant.restaurant_jerryweb;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.ConcurrentModificationException;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import restaurant.restaurant_jerryweb.agent.Agent;
-import restaurant.restaurant_jerryweb.gui.Menu;
-import restaurant.restaurant_jerryweb.interfaces.Market;
-
-/**
- * Market Agent
- */
-
-public class MarketRole extends Agent implements Market {
-	static final int semaphoreCerts = 0;
-	public List<Food> foodItems= Collections.synchronizedList(new ArrayList<Food>());
-	public List<Order> restockOrder = Collections.synchronizedList(new ArrayList<Order>());
-	//public List<Bill>
-	public Menu m = new Menu();
-	public Map<String,Food> stockMap = new HashMap<String,Food>(4);	
-	private CookRole cook;	
-	private CashierRole cashier;
-	double bill = 0;
-	
-	public class Order{
-		OrderState s;
-		String name;
-		double cost;
-		
-		Map<String,JerrywebCookRole.Food> cookInventory;
-		public Order(String nm,Map<String, JerrywebCookRole.Food> foodMap, OrderState orderS, double price){
-			cookInventory = foodMap;
-			
-			name = nm;
-			s = orderS;
-			cost = price;
-		}
-	}
-
-	public enum OrderState
-	{pending, sent, Paid, Done}
-	
-	public class Food {
-		String type;
-		int amount; 
-		double price;
-		public Food(String foodType,  int quantity, double cost){
-			type = foodType;
-			amount = quantity; 
-			price = cost; 
-		}
-	}
-	
-	public enum FoodState
-	{idle,ordered, delivered}
-	
-	private String name;
-	//private Semaphore atTable = new Semaphore(semaphoreCerts,true);
-
-	//public HostGui hostGui = null;
-
-	public MarketRole(String name) {
-		super();
-		this.name = name;
-		//if(name.equals())
-		stockMap.put("steak",new Food("steak", 15, 7));
-		stockMap.put("chicken",new Food("chicken", 21, 5));
-		stockMap.put("salad",new Food("salad", 30, 3));
-		stockMap.put("pizza",new Food("pizza", 24, 4));
-	}
-	
-	public void setCook(CookRole myCook) {
-		this.cook = myCook;
-
-	}
-	
-	public void setCashier(CashierRole myCashier) {
-		this.cashier = myCashier;
-
-	}
-	
-	public String getMaitreDName() {
-		return name;
-	}
-
-	public String getName() {
-		return name;
-	}
-	// Messages
-	
-	public void msgGiveMeOrder(String choice, Map<String, JerrywebCookRole.Food> foodMap){
-		//print("Ok cook here is your order.");
-		restockOrder.add(new Order(choice, foodMap, OrderState.pending,0));
-		stateChanged();
-		
-	}
-	
-	public void msgPayment(double income, int BN){
-		synchronized(restockOrder){
-		for(int i=0; i<restockOrder.size(); i++){
-			//if(restockOrder.get(i).cost == income){
-			if(i == BN && income == restockOrder.get(i).cost){
-				restockOrder.get(i).s = OrderState.Paid;
-				stateChanged();
-			}
-		}
-		}
-	}
-	
-	/**
-	 * Scheduler.  Determine what action is called for, and do it.
-	 */
-	protected boolean pickAndExecuteAnAction() {
-		try{
-		for(int i=0; i<restockOrder.size(); i++){
-			if(restockOrder.get(i).s == OrderState.pending){
-				//restockOrder.get(i).
-				processRequest(restockOrder.get(i), i);
-				
-				return true;
-			}
-		}
-		
-		for(int i=0; i<restockOrder.size(); i++){
-			if(restockOrder.get(i).s == OrderState.Paid){
-				CompleteTransaction(restockOrder.get(i));
-				return true;
-			}
-		
-		}
-		
-		return false;}
-		catch (ConcurrentModificationException e) {
-		
-		return false;
-		}
-	}
-
-	// Actions
-	public void CompleteTransaction(Order order){
-		cashier.msgMarketPaid(this);
-		order.s = OrderState.Done;
-	}
-	
-	public void processRequest(Order order, int x){
-		int orderSize = 0;
-	
-		/*if(stockMap.get("steak").amount > 0){
-			//if(stockMap.get("steak").amount >= order.cookInventory.get("steak").capacity){
-			orderSize = order.cookInventory.get("steak").capacity - order.cookInventory.get("steak").amount;
-			
-			if((stockMap.get("steak").amount - orderSize) >= 0){
-				order.cookInventory.get("steak").amount = orderSize;
-				stockMap.get("steak").amount = stockMap.get("steak").amount - orderSize;
-				//print("We will give you " + orderSize + " steaks");
-				cook.msgHereIsOrder(order.name, order.cookInventory);
-				order.s = OrderState.sent;
-				stateChanged();
-			}
-			else{
-				order.cookInventory.get("steak").amount = stockMap.get("steak").amount;
-				stockMap.get("steak").amount = 0;
-				cook.msgHereIsOrder(order.name, order.cookInventory);
-				order.s = OrderState.sent;
-				//print("We will give you " + orderSize + " steaks");
-				stateChanged();
-			}
-		}
-		else{
-			//print("Steak is out of Stock!");
-				cook.msgOutOfStock("steak");
-				order.s = OrderState.out;
-				stateChanged();
-		}*/
-		
-		for(int i=0; i<4; i++){
-			String foodItem = "";
- 			if( i == 0){
- 				foodItem = "steak";
- 			}
- 		
- 			if(i == 1){
- 				foodItem = "chicken";
- 			}
- 			
- 			if(i == 2){
- 				foodItem = "salad";
- 			}
- 		
- 			if(i == 3){
- 				foodItem = "pizza";
- 			}
- 		
- 			if(stockMap.get(foodItem).amount > 0){
-			//if(stockMap.get(foodItem).amount >= order.cookInventory.get(foodItem).capacity){
-				orderSize = order.cookInventory.get(foodItem).capacity - order.cookInventory.get(foodItem).amount;
-			
-				if((stockMap.get(foodItem).amount - orderSize) >= 0){
-					order.cookInventory.get(foodItem).amount = order.cookInventory.get(foodItem).amount + orderSize;
-					stockMap.get(foodItem).amount = stockMap.get(foodItem).amount - orderSize;
-					order.cost = order.cost + stockMap.get(foodItem).price*orderSize;
-					//print("We will give you " + orderSize + " " + foodItem);
-					
-				}
-				else{
-					order.cookInventory.get(foodItem).amount = stockMap.get(foodItem).amount;
-					stockMap.get(foodItem).amount = 0;
-					order.cost = order.cost + stockMap.get(foodItem).price*orderSize;
-					//print("We will give you " + orderSize + " " + foodItem);
-				}
-			}
-			else{
-				//print("" + foodItem + " is out of Stock!");
-					cook.msgOutOfStock(this, foodItem);
-					//order.s = OrderState.out;
-					stateChanged();
-			}
-		}
-		//cook.msgHereIsOrder(order.name, order.cookInventory);
-		cashier.msgPayMarket(this, order.cost, x);
-		order.s = OrderState.sent;
-		stateChanged();
-	}
-	//utilities
-	public List<Order> getRestockList(){
-		return restockOrder;
-	}
-
-
-}
\ No newline at end of file
diff --git a/src/restaurant/restaurant_jerryweb/RSWaiterRole.java b/src/restaurant/restaurant_jerryweb/RSWaiterRole.java
deleted file mode 100644
index 47ba4b2..0000000
--- a/src/restaurant/restaurant_jerryweb/RSWaiterRole.java
+++ /dev/null
@@ -1,539 +0,0 @@
-package restaurant.restaurant_jerryweb;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.ConcurrentModificationException;
-import java.util.List;
-import java.util.concurrent.Semaphore;
-
-import restaurant.restaurant_jerryweb.CookRole.OrderState;
-import restaurant.restaurant_jerryweb.agent.Agent;
-import restaurant.restaurant_jerryweb.gui.Menu;
-import restaurant.restaurant_jerryweb.gui.WaiterGui;
-import restaurant.restaurant_jerryweb.interfaces.Customer;
-import restaurant.restaurant_jerryweb.interfaces.Waiter;
-
-/**
- * Restaurant Waiter Agent
- */
-//We only have 2 types of agents in this prototype. A customer and an agent that
-//does all the rest. Rather than calling the other agent a waiter, we called him
-//the HostAgent. A Host is the manager of a restaurant who sees that all
-//is proceeded as he wishes.
-public class RSWaiterRole extends Agent implements Waiter {
-
-	private HostRole host;
-	private CookRole cook;
-	private CashierRole cashier;
-	
-	/**
-	 * hack to establish connection to Host agent,
-	 * and cook agent.
-	 */
-	public void setHost(HostRole myHost) {
-		//host = new HostAgent(myHost.getName());
-		this.host = myHost;
-
-	}
-
-	public void setCook(CookRole myCook) {
-
-		this.cook = myCook;
-
-	}
-
-	static final int semaphoreCerts = 0;
-
-
-	public List<MyCustomer> Customers = Collections.synchronizedList(new ArrayList<MyCustomer>());
-	public Menu m;
-	//note that tables is typed with Collection semantics.
-	//Later we will see how it is implemented
-
-	private String name;
-	private Semaphore atTable = new Semaphore(semaphoreCerts,true);
-	private Semaphore atCook = new Semaphore(semaphoreCerts, true);
-	private Semaphore atCashier = new Semaphore(semaphoreCerts, true);
-	private Semaphore atCustomer = new Semaphore(semaphoreCerts, true);
-	private Semaphore waitingForOrder = new Semaphore(semaphoreCerts,true);
-	private Semaphore servingFood = new Semaphore(semaphoreCerts,true);
-	public WaiterGui waiterGui = null;
-
-	public RSWaiterRole(String name) {
-		super();
-		this.name = name;
-		//print("I am an rs waiter");
-
-	}
-
-	public class MyCustomer{
-		Customer c;
-		CustomerState s;
-		int table;
-		String choice;
-
-		public MyCustomer(Customer cust, int tableNum, CustomerState state) {
-			c = cust;
-			table = tableNum;
-			s = state;
-		}
-
-		public Customer getCustomer(){
-			return c;
-		}
-
-	}
-
-	public enum CustomerState
-	{waiting, seated, readyToOrder, askedToOrder, ordered, waitingForFood, customersFoodReady, bringingCustomerFood, gettingFoodFromCook, eating, 
-	sentBillToCashier, waitingForBill, billed, payingBill, leaving}
-
-	public String getMaitreDName() {
-		return name;
-	}
-
-	public String getName() {
-		return name;
-	}
-
-	public List getWaitingCustomers() {
-		return Customers;
-	}
-
-	// Messages
-
-	
-	public void msgPleaseSitCustomer(Customer cust, int tablenum) {
-		Customers.add(new MyCustomer(cust, tablenum, CustomerState.waiting));
-		//print("Adding " + cust.getName() + " to MyCustomer list. The table for this customer is " + tablenum);
-		////print("" + Customers.size());
-		stateChanged();
-	}
-
-	//Finds the customer on the waiter's list of customers, and sets the customer's state to leaving
-	//This also notifies the host that the customer is leaving and that said customer's table is free
-	public void msgLeavingTable(Customer c) {
-		synchronized(Customers){
-		for(int i = 0; i <Customers.size(); i++){
-			if(Customers.get(i).c.equals(c)){
-				findString("", Customers.get(i).table);
-				Customers.get(i).s = CustomerState.leaving;
-				//Customers.get(i).s = CustomerState.payingBill;
-				//print(Customers.get(i).c.getName() + " is in leaving state");
-				host.msgCustLeavingTable(c);
-				Customers.remove(i);
-				////print("" + Customers.size());
-				stateChanged();
-			}
-		}
-		}
-	}
-	
-	public void msgCanGoOnBreak(){
-		//print("I am going on Break");
-	}	
-	public void msgOutOfFood(String choice, int t){
-		synchronized(Customers){
-		for(int i = 0; i <Customers.size(); i++){
-			if(Customers.get(i).table == t){
-				Customers.get(i).c.msgOrderNotAvailable(choice);
-				Customers.get(i).s = CustomerState.readyToOrder;
-				stateChanged();
-			}
-		}
-		}
-	}
-
-	public void msgAtTable() {//from animation
-		////print("msgAtTable() called");
-		atTable.release();// = true;
-		stateChanged();
-	}
-
-	public void msgAtCook() {//from animation
-		////print("msgAtCook() called");
-		atCook.release();// = true;
-		stateChanged();
-	}
-	
-	public void msgAtCashier(){//from animation
-		//print("here");
-		atCashier.release();
-		stateChanged();
-		
-	}
-	
-	public void msgAtWaitingCustomer(){
-		atCustomer.release();
-		stateChanged();
-	}
-	public void msgServedFood(){
-		servingFood.release();
-		stateChanged();
-	}
-
-	public void msgReadyToOrder(Customer customer){
-		int x = find(customer);
-
-		Customers.get(x).s = CustomerState.readyToOrder;
-		stateChanged();
-	}
-
-	public void msgHereIsMyOrder(Customer customer, String order){
-		//atTable.release();
-		int x = find(customer);
-		Customers.get(x).choice = order;
-		Customers.get(x).s = CustomerState.askedToOrder;
-		//print("Alright so you would like the " + order);
-		waitingForOrder.release();
-
-		stateChanged();
-	}
-
-	public void msgOrderReady(String meal, int t){
-		findCookingString("", t);
-		findPlateString(meal, t);
-		
-		//print("Ok, coming to get " + meal);
-		synchronized(Customers){
-			for(int i = 0; i <Customers.size(); i++){
-				if(Customers.get(i).table == t){
-
-					Customers.get(i).s = CustomerState.customersFoodReady;
-					stateChanged();
-				}
-			}
-		}
-	}
-	
-	public void msgAskForBreak(){
-		host.msgWantToGoOnBreak(this);
-		stateChanged();
-	}
-
-	public void msgTakeFood(String meal, int t){
-		//print("Taking " + meal + "to table " + t);
-	synchronized(Customers){
-		for(int i = 0; i <Customers.size(); i++){
-			if(Customers.get(i).table == t){
-				Customers.get(i).s = CustomerState.bringingCustomerFood;
-				stateChanged();
-			}
-		}
-	}
-	}
-
-	public void msgRecievedFood (){
-		servingFood.release();
-		stateChanged();
-	}
-	
-	public void msgHereIsBill(Customer customer, double check){
-		//print("thanks for the bill");
-		int x = find(customer);
-		Customers.get(x).s = CustomerState.waitingForBill;
-		stateChanged();
-	}
-	
-	public void msgDonePaying(Customer customer){
-		int x = find(customer);
-		Customers.get(x).s = CustomerState.leaving;
-		//Customers.remove(x);
-		stateChanged();
-	}
-
-	/**
-	 * Scheduler.  Determine what action is called for, and do it.
-	 */
-	
-	public boolean pickAndExecuteAnAction() {
-		try {
-		//synchronized(Customers){
-			for(int i =0; i < Customers.size(); i++){
-			////print("" + Customers.get(i).s );
-				if(Customers.get(i).s == CustomerState.waiting){
-					seatCustomer(Customers.get(i));
-					return true;
-				}
-			}
-		
-		
-		//synchronized(Customers){
-			for(int i =0; i < Customers.size(); i++){
-				if(Customers.get(i).s == CustomerState.readyToOrder){
-					takeOrder(Customers.get(i));
-					return true;
-				}
-			}
-		//}
-		
-		//synchronized(Customers){
-			for(int i =0; i < Customers.size(); i++){
-				if(Customers.get(i).s == CustomerState.customersFoodReady){
-					pickUpFood(Customers.get(i));
-					return true;
-				}
-			}
-		//}
-		
-		//synchronized(Customers){
-			for(int i =0; i < Customers.size(); i++){
-				if(Customers.get(i).s == CustomerState.eating){
-					GetBill(Customers.get(i));
-					return true;
-				}
-			}
-		//}
-
-		
-		waiterGui.GoToIdleSpot();
-		return false;
-		//we have tried all our rules and found
-		//nothing to do. So return false to main loop of abstract agent
-		//and wait.
-		}
-		catch (ConcurrentModificationException e) {
-			
-			return false;
-		}
-	}
-
-	// Actions
-
-	private void seatCustomer(MyCustomer customer) {
-		waiterGui.waiterString = "";
-		if(!waiterGui.getIsAtCustomerQue()){
-			waiterGui.DoLeaveCustomer();
-			try{
-				atTable.acquire();
-			}
-			catch (InterruptedException e) {
-
-				e.printStackTrace();
-			}
-			host.msgCustomerSeated(this);
-		}
-		else{
-			DoSeatCustomer(customer);
-			customer.c.msgSitAtTable(customer.table, m = new Menu(), this);
-
-			try {
-				atTable.acquire();
-			} catch (InterruptedException e) {
-
-				e.printStackTrace();
-			}
-		customer.s = CustomerState.seated;
-		stateChanged();
-		//host.msgWantToGoOnBreak(this);
-		/*waiterGui.DoLeaveCustomer();
-		try{
-			atTable.acquire();
-		}
-		catch (InterruptedException e) {
-
-			e.printStackTrace();
-		}*/
-		host.msgCustomerSeated(this);
-		}
-		
-	}
-
-	// The animation DoXYZ() routines
-	private void DoSeatCustomer(MyCustomer customer) {
-		//Notice how we print "customer" directly. It's toString method will do it.
-		//Same with "table"
-		print("Seating " + customer.c + " at " + customer.table);
-		waiterGui.DoBringToTable(customer.c, customer.table); 
-
-	}
-
-	public void takeOrder(MyCustomer customer){
-
-		waiterGui.DoGoToTable(customer.c, customer.table);
-		try{
-			atTable.acquire();
-		}
-		catch (InterruptedException e) {
-
-			e.printStackTrace();
-		}
-		print("What would you like?");
-		customer.c.msgWhatDoYouWant();		
-		try {
-			waitingForOrder.acquire();
-		} catch (InterruptedException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		//waiterGui.GoToIdleSpot();
-		
-		sendOrder(customer);
-
-	}
-
-	//Stores the customer's order into the choice variable of customer and then sends the information to the cook
-	public void sendOrder(MyCustomer customer){
-		customer.s = CustomerState.waitingForFood;
-		//cook.msgCookThis(this, customer.choice, customer.table);
-		cook.addToRevolvingStand(this, customer.choice, customer.table, OrderState.pending);
-
-		print("putting order on revolving stand" + customer.c.getName() + " wants " + customer.choice);
-
-		waiterGui.DoGoToCook();
-		try{
-			atCook.acquire();
-		}
-		catch (InterruptedException e) {
-
-			e.printStackTrace();
-		}
-		//findCookingString(customer.choice, customer.table);
-	}
-
-
-	public void pickUpFood(MyCustomer customer){
-		waiterGui.DoGoToCook();
-		try{
-			atCook.acquire();
-		}
-		catch (InterruptedException e) {
-
-			e.printStackTrace();
-		}
-		findPlateString("", customer.table);
-		customer.s = CustomerState.gettingFoodFromCook;
-		cook.msgGiveMeOrder(customer.table);
-
-		waiterGui.waiterString = customer.choice;
-		stateChanged();
-		serveCustomer(customer);	
-	}
-
-
-
-	public void serveCustomer(MyCustomer customer){
-
-		waiterGui.DoGoToTable(customer.c , customer.table);
-		try{
-			atTable.acquire();
-		}
-		catch (InterruptedException e) {
-
-			e.printStackTrace();
-		}
-
-		//waiterGui.waiterString = "";
-		findString(customer.choice, customer.table);
-		//print("Here is your " + customer.choice + ", enjoy!");
-		customer.c.msgHereIsYourFood();
-		customer.s = CustomerState.eating;
-		
-			
-		//waiterGui.DoLeaveCustomer();
-		waiterGui.waiterString = "";
-		/*try{
-			atTable.acquire();
-		}
-		catch (InterruptedException e) {
-
-			e.printStackTrace();
-		}*/
-		stateChanged();
-
-	}
-	
-	public void GetBill(MyCustomer customer){
-		waiterGui.DoGoToCashier();
-		try {
-			atCashier.acquire();
-		} catch (InterruptedException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		//print("" + cashier.getName() + " please compute check for customer " + customer.c.getName());
-		cashier.msgComputeBill(this, customer.c, customer.choice);
-		
-		waiterGui.DoGoToTable(customer.c, customer.table);
-		try{
-			atTable.acquire();
-		}catch (InterruptedException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		
-		customer.c.msgHereIsCheck();
-		customer.s = CustomerState.billed;
-		
-	}
-
-	//utilities
-	public void setCashier(CashierRole cashier){
-		this.cashier = cashier;
-	}
-	
-	public int find(Customer c){
-	//synchronized(Customers){
-		for(int i = 0; i <Customers.size(); i++){
-			if(Customers.get(i).c.equals(c)){
-				return i;
-				}
-			}
-		//}
-		//print("Can't find customer in waiter find function!");
-		return 0;
-	}
-	
-	//This is used to find the number 
-	public void findString(String choice, int tableNumber){
-		if(tableNumber == 1){
-			waiterGui.table1String = choice;
-		}
-		if(tableNumber == 2){
-			waiterGui.table2String = choice;
-		}
-		if(tableNumber == 3){
-			waiterGui.table3String = choice;
-		}
-	}
-	
-	public void findCookingString(String choice, int tableNumber){
-		if(tableNumber == 1){
-			waiterGui.cookingFood1 = choice;
-		}
-		if(tableNumber == 2){
-			waiterGui.cookingFood2 = choice;
-		}
-		if(tableNumber == 3){
-			waiterGui.cookingFood3 = choice;
-		}
-	}
-	
-	public void findPlateString(String choice, int tableNumber){
-		if(tableNumber == 1){
-			waiterGui.plate1 = choice;
-		}
-		if(tableNumber == 2){
-			waiterGui.plate2 = choice;
-		}
-		if(tableNumber == 3){
-			waiterGui.plate3 = choice;
-		}
-	}
-
-
-	public void setGui(WaiterGui gui) {
-		waiterGui = gui;
-	}
-
-	public WaiterGui getGui() {
-		return waiterGui;
-	}
-	
-	public void addCustomerForTesting(Customer customer, int table){
-		Customers.add(new MyCustomer(customer, table, CustomerState.waiting));
-	}
-
-
-
-}
\ No newline at end of file
diff --git a/src/restaurant/restaurant_jerryweb/WaiterRole.java b/src/restaurant/restaurant_jerryweb/WaiterRole.java
deleted file mode 100644
index a010b2a..0000000
--- a/src/restaurant/restaurant_jerryweb/WaiterRole.java
+++ /dev/null
@@ -1,531 +0,0 @@
-package restaurant.restaurant_jerryweb;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.ConcurrentModificationException;
-import java.util.List;
-import java.util.concurrent.Semaphore;
-
-import restaurant.restaurant_jerryweb.agent.Agent;
-import restaurant.restaurant_jerryweb.gui.Menu;
-import restaurant.restaurant_jerryweb.gui.WaiterGui;
-import restaurant.restaurant_jerryweb.interfaces.Customer;
-import restaurant.restaurant_jerryweb.interfaces.Waiter;
-
-/**
- * Restaurant Waiter Agent
- */
-//We only have 2 types of agents in this prototype. A customer and an agent that
-//does all the rest. Rather than calling the other agent a waiter, we called him
-//the HostAgent. A Host is the manager of a restaurant who sees that all
-//is proceeded as he wishes.
-public class WaiterRole extends Agent implements Waiter {
-
-	private HostRole host;
-	private CookRole cook;
-	private CashierRole cashier;
-	
-	/**
-	 * hack to establish connection to Host agent,
-	 * and cook agent.
-	 */
-	public void setHost(HostRole myHost) {
-		//host = new HostAgent(myHost.getName());
-		this.host = myHost;
-
-	}
-
-	public void setCook(CookRole myCook) {
-
-		this.cook = myCook;
-
-	}
-
-	static final int semaphoreCerts = 0;
-
-
-	public List<MyCustomer> Customers = Collections.synchronizedList(new ArrayList<MyCustomer>());
-	public Menu m;
-	//note that tables is typed with Collection semantics.
-	//Later we will see how it is implemented
-
-	private String name;
-	private Semaphore atTable = new Semaphore(semaphoreCerts,true);
-	private Semaphore atCook = new Semaphore(semaphoreCerts, true);
-	private Semaphore atCashier = new Semaphore(semaphoreCerts, true);
-	private Semaphore atCustomer = new Semaphore(semaphoreCerts, true);
-	private Semaphore waitingForOrder = new Semaphore(semaphoreCerts,true);
-	private Semaphore servingFood = new Semaphore(semaphoreCerts,true);
-	public WaiterGui waiterGui = null;
-
-	public WaiterRole(String name) {
-		super();
-		this.name = name;
-
-	}
-
-	public class MyCustomer{
-		Customer c;
-		CustomerState s;
-		int table;
-		String choice;
-
-		public MyCustomer(Customer cust, int tableNum, CustomerState state) {
-			c = cust;
-			table = tableNum;
-			s = state;
-		}
-
-		public Customer getCustomer(){
-			return c;
-		}
-
-	}
-
-	public enum CustomerState
-	{waiting, seated, readyToOrder, askedToOrder, ordered, waitingForFood, customersFoodReady, bringingCustomerFood, gettingFoodFromCook, eating, 
-	sentBillToCashier, waitingForBill, billed, payingBill, leaving}
-
-	public String getMaitreDName() {
-		return name;
-	}
-
-	public String getName() {
-		return name;
-	}
-
-	public List getWaitingCustomers() {
-		return Customers;
-	}
-
-	// Messages
-
-	
-	public void msgPleaseSitCustomer(Customer cust, int tablenum) {
-		Customers.add(new MyCustomer(cust, tablenum, CustomerState.waiting));
-		////print("Adding " + cust.getName() + " to MyCustomer list. The table for this customer is " + tablenum);
-		//////print("" + Customers.size());
-		stateChanged();
-	}
-
-	//Finds the customer on the waiter's list of customers, and sets the customer's state to leaving
-	//This also notifies the host that the customer is leaving and that said customer's table is free
-	public void msgLeavingTable(Customer c) {
-		synchronized(Customers){
-		for(int i = 0; i <Customers.size(); i++){
-			if(Customers.get(i).c.equals(c)){
-				findString("", Customers.get(i).table);
-				Customers.get(i).s = CustomerState.leaving;
-				//Customers.get(i).s = CustomerState.payingBill;
-				////print(Customers.get(i).c.getName() + " is in leaving state");
-				host.msgCustLeavingTable(c);
-				Customers.remove(i);
-				////print("" + Customers.size());
-				stateChanged();
-			}
-		}
-		}
-	}
-	
-	public void msgCanGoOnBreak(){
-		//print("I am going on Break");
-	}	
-	public void msgOutOfFood(String choice, int t){
-		synchronized(Customers){
-		for(int i = 0; i <Customers.size(); i++){
-			if(Customers.get(i).table == t){
-				Customers.get(i).c.msgOrderNotAvailable(choice);
-				Customers.get(i).s = CustomerState.readyToOrder;
-				stateChanged();
-			}
-		}
-		}
-	}
-
-	public void msgAtTable() {//from animation
-		////print("msgAtTable() called");
-		atTable.release();// = true;
-		stateChanged();
-	}
-
-	public void msgAtCook() {//from animation
-		////print("msgAtCook() called");
-		atCook.release();// = true;
-		stateChanged();
-	}
-	
-	public void msgAtCashier(){//from animation
-		//print("here");
-		atCashier.release();
-		stateChanged();
-		
-	}
-	
-	public void msgAtWaitingCustomer(){
-		atCustomer.release();
-		stateChanged();
-	}
-	public void msgServedFood(){
-		servingFood.release();
-		stateChanged();
-	}
-
-	public void msgReadyToOrder(Customer customer){
-		int x = find(customer);
-
-		Customers.get(x).s = CustomerState.readyToOrder;
-		stateChanged();
-	}
-
-	public void msgHereIsMyOrder(Customer customer, String order){
-		//atTable.release();
-		int x = find(customer);
-		Customers.get(x).choice = order;
-		Customers.get(x).s = CustomerState.askedToOrder;
-		//print("Alright so you would like the " + order);
-		waitingForOrder.release();
-
-		stateChanged();
-	}
-
-	public void msgOrderReady(String meal, int t){
-		findCookingString("", t);
-		findPlateString(meal, t);
-		
-		//print("Ok, coming to get " + meal);
-		synchronized(Customers){
-			for(int i = 0; i <Customers.size(); i++){
-				if(Customers.get(i).table == t){
-
-					Customers.get(i).s = CustomerState.customersFoodReady;
-					stateChanged();
-				}
-			}
-		}
-	}
-	
-	public void msgAskForBreak(){
-		host.msgWantToGoOnBreak(this);
-		stateChanged();
-	}
-
-	public void msgTakeFood(String meal, int t){
-		//print("Taking " + meal + "to table " + t);
-	synchronized(Customers){
-		for(int i = 0; i <Customers.size(); i++){
-			if(Customers.get(i).table == t){
-				Customers.get(i).s = CustomerState.bringingCustomerFood;
-				stateChanged();
-			}
-		}
-	}
-	}
-
-	public void msgRecievedFood (){
-		servingFood.release();
-		stateChanged();
-	}
-	
-	public void msgHereIsBill(Customer customer, double check){
-		//print("thanks for the bill");
-		int x = find(customer);
-		Customers.get(x).s = CustomerState.waitingForBill;
-		stateChanged();
-	}
-	
-	public void msgDonePaying(Customer customer){
-		int x = find(customer);
-		Customers.get(x).s = CustomerState.leaving;
-		//Customers.remove(x);
-		stateChanged();
-	}
-
-	/**
-	 * Scheduler.  Determine what action is called for, and do it.
-	 */
-	
-	protected boolean pickAndExecuteAnAction() {
-		try {
-		//synchronized(Customers){
-			for(int i =0; i < Customers.size(); i++){
-			////print("" + Customers.get(i).s );
-				if(Customers.get(i).s == CustomerState.waiting){
-					seatCustomer(Customers.get(i));
-					return true;
-				}
-			}
-		
-		
-		//synchronized(Customers){
-			for(int i =0; i < Customers.size(); i++){
-				if(Customers.get(i).s == CustomerState.readyToOrder){
-					takeOrder(Customers.get(i));
-					return true;
-				}
-			}
-		//}
-		
-		//synchronized(Customers){
-			for(int i =0; i < Customers.size(); i++){
-				if(Customers.get(i).s == CustomerState.customersFoodReady){
-					pickUpFood(Customers.get(i));
-					return true;
-				}
-			}
-		//}
-		
-		//synchronized(Customers){
-			for(int i =0; i < Customers.size(); i++){
-				if(Customers.get(i).s == CustomerState.eating){
-					GetBill(Customers.get(i));
-					return true;
-				}
-			}
-		//}
-
-		
-		waiterGui.GoToIdleSpot();
-		return false;
-		//we have tried all our rules and found
-		//nothing to do. So return false to main loop of abstract agent
-		//and wait.
-		}
-		catch (ConcurrentModificationException e) {
-			
-			return false;
-		}
-	}
-
-	// Actions
-
-	private void seatCustomer(MyCustomer customer) {
-		waiterGui.waiterString = "";
-		if(!waiterGui.getIsAtCustomerQue()){
-			waiterGui.DoLeaveCustomer();
-			try{
-				atTable.acquire();
-			}
-			catch (InterruptedException e) {
-
-				e.printStackTrace();
-			}
-			host.msgCustomerSeated(this);
-		}
-		else{
-			DoSeatCustomer(customer);
-			customer.c.msgSitAtTable(customer.table, m = new Menu(), this);
-
-			try {
-				atTable.acquire();
-			} catch (InterruptedException e) {
-
-				e.printStackTrace();
-			}
-		customer.s = CustomerState.seated;
-		stateChanged();
-		//host.msgWantToGoOnBreak(this);
-		/*waiterGui.DoLeaveCustomer();
-		try{
-			atTable.acquire();
-		}
-		catch (InterruptedException e) {
-
-			e.//printStackTrace();
-		}*/
-		host.msgCustomerSeated(this);
-		}
-		
-	}
-
-	// The animation DoXYZ() routines
-	private void DoSeatCustomer(MyCustomer customer) {
-		//Notice how we //print "customer" directly. It's toString method will do it.
-		//Same with "table"
-		//print("Seating " + customer.c + " at " + customer.table);
-		waiterGui.DoBringToTable(customer.c, customer.table); 
-
-	}
-
-	public void takeOrder(MyCustomer customer){
-
-		waiterGui.DoGoToTable(customer.c, customer.table);
-		try{
-			atTable.acquire();
-		}
-		catch (InterruptedException e) {
-
-			e.printStackTrace();
-		}
-		//print("What would you like?");
-		customer.c.msgWhatDoYouWant();		
-		try {
-			waitingForOrder.acquire();
-		} catch (InterruptedException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		//waiterGui.GoToIdleSpot();
-		
-		sendOrder(customer);
-
-	}
-
-	//Stores the customer's order into the choice variable of customer and then sends the information to the cook
-	public void sendOrder(MyCustomer customer){
-		customer.s = CustomerState.waitingForFood;
-		cook.msgCookThis(this, customer.choice, customer.table);
-		//print("Cook! Customer " + customer.c.getName() + " wants " + customer.choice);
-
-		waiterGui.DoGoToCook();
-		try{
-			atCook.acquire();
-		}
-		catch (InterruptedException e) {
-
-			e.printStackTrace();
-		}
-		findCookingString(customer.choice, customer.table);
-	}
-
-
-	public void pickUpFood(MyCustomer customer){
-		waiterGui.DoGoToCook();
-		try{
-			atCook.acquire();
-		}
-		catch (InterruptedException e) {
-
-			e.printStackTrace();
-		}
-		findPlateString("", customer.table);
-		customer.s = CustomerState.gettingFoodFromCook;
-		cook.msgGiveMeOrder(customer.table);
-
-		waiterGui.waiterString = customer.choice;
-		stateChanged();
-		serveCustomer(customer);	
-	}
-
-
-
-	public void serveCustomer(MyCustomer customer){
-
-		waiterGui.DoGoToTable(customer.c , customer.table);
-		try{
-			atTable.acquire();
-		}
-		catch (InterruptedException e) {
-
-			e.printStackTrace();
-		}
-
-		//waiterGui.waiterString = "";
-		findString(customer.choice, customer.table);
-		//print("Here is your " + customer.choice + ", enjoy!");
-		customer.c.msgHereIsYourFood();
-		customer.s = CustomerState.eating;
-		
-			
-		//waiterGui.DoLeaveCustomer();
-		waiterGui.waiterString = "";
-		/*try{
-			atTable.acquire();
-		}
-		catch (InterruptedException e) {
-
-			e.printStackTrace();
-		}*/
-		stateChanged();
-
-	}
-	
-	public void GetBill(MyCustomer customer){
-		waiterGui.DoGoToCashier();
-		try {
-			atCashier.acquire();
-		} catch (InterruptedException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		//print("" + cashier.getName() + " please compute check for customer " + customer.c.getName());
-		cashier.msgComputeBill(this, customer.c, customer.choice);
-		
-		waiterGui.DoGoToTable(customer.c, customer.table);
-		try{
-			atTable.acquire();
-		}catch (InterruptedException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		
-		customer.c.msgHereIsCheck();
-		customer.s = CustomerState.billed;
-		
-	}
-
-	//utilities
-	public void setCashier(CashierRole cashier){
-		this.cashier = cashier;
-	}
-	
-	public int find(Customer c){
-	//synchronized(Customers){
-		for(int i = 0; i <Customers.size(); i++){
-			if(Customers.get(i).c.equals(c)){
-				return i;
-				}
-			}
-		//}
-		//print("Can't find customer in waiter find function!");
-		return 0;
-	}
-	
-	//This is used to find the number 
-	public void findString(String choice, int tableNumber){
-		if(tableNumber == 1){
-			waiterGui.table1String = choice;
-		}
-		if(tableNumber == 2){
-			waiterGui.table2String = choice;
-		}
-		if(tableNumber == 3){
-			waiterGui.table3String = choice;
-		}
-	}
-	
-	public void findCookingString(String choice, int tableNumber){
-		if(tableNumber == 1){
-			waiterGui.cookingFood1 = choice;
-		}
-		if(tableNumber == 2){
-			waiterGui.cookingFood2 = choice;
-		}
-		if(tableNumber == 3){
-			waiterGui.cookingFood3 = choice;
-		}
-	}
-	
-	public void findPlateString(String choice, int tableNumber){
-		if(tableNumber == 1){
-			waiterGui.plate1 = choice;
-		}
-		if(tableNumber == 2){
-			waiterGui.plate2 = choice;
-		}
-		if(tableNumber == 3){
-			waiterGui.plate3 = choice;
-		}
-	}
-
-
-	public void setGui(WaiterGui gui) {
-		waiterGui = gui;
-	}
-
-	public WaiterGui getGui() {
-		return waiterGui;
-	}
-
-
-
-}
\ No newline at end of file
diff --git a/src/restaurant/restaurant_jerryweb/gui/AnimationPanel.java b/src/restaurant/restaurant_jerryweb/gui/AnimationPanel.java
deleted file mode 100644
index 32d90a4..0000000
--- a/src/restaurant/restaurant_jerryweb/gui/AnimationPanel.java
+++ /dev/null
@@ -1,138 +0,0 @@
-package restaurant.restaurant_jerryweb.gui;
-
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.Graphics;
-import java.awt.Graphics2D;
-import java.awt.Image;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.swing.JPanel;
-import javax.swing.Timer;
-
-import base.Time;
-
-public class AnimationPanel extends JPanel implements ActionListener {
-	
-	static final int tableWidth = 50;
-	static final int tableHeight = 50;
-	static final int table1Xpos = 200;
-	static final int table1Ypos = 250;
-	
-	static final int table2Xpos = 310;
-	static final int table2Ypos = 185;
-
-	static final int table3Xpos = 370;
-	static final int table3Ypos = 100;
-	
-	static final int kitchenXpos = 225;
-	static final int kitchenYpos = 50;
-	static final int kitchenWidth = 125;
-	static final int kitchenHeight = 20;
-	
-	static final int grillXpos = 225;
-	static final int grillYpos = 5;
-	static final int grillWidth = 125;
-	static final int grillHeight = 20;
-	
-	static final int cashierXpos = 50;
-	static final int cashierYpos = 200;
-	static final int cashierWidth = 20;
-	static final int cashierHeight = 20;
-	
-	static final int cookXpos = 275;
-	static final int cookYpos = 26;
-	static final int cookWidth = 20;
-	static final int cookHeight = 20;
-	
-	static final int panelXpos = 0;
-	static final int panelYpos = 0;
-	
-    private final int WINDOWX = 500;
-    private final int WINDOWY = 500;
-    private Image bufferImage;
-    private Dimension bufferSize;
-
-    private List<Gui> guis = new ArrayList<Gui>();
-
-    public AnimationPanel() {
-    	setSize(WINDOWX, WINDOWY);
-    	setVisible(true);
-        
-        bufferSize = this.getSize();
- 
-    	Timer timer = new Timer(Time.cSYSCLK/20, this );
-    	timer.start();
-    }
-
-	public void actionPerformed(ActionEvent e) {
-		repaint();  //Will have paintComponent called
-			synchronized (guis) {
-	        	for(Gui gui : guis) {
-	                if (gui.isPresent()) {
-	                    gui.updatePosition();
-	                }
-	            }
-			}
-
-	}
-
-    public void paintComponent(Graphics g) {
-        Graphics2D g2 = (Graphics2D)g;
-
-        //Clear the screen by painting a rectangle the size of the frame
-        g2.setColor(getBackground());
-        g2.fillRect(panelXpos, panelYpos, WINDOWX, WINDOWY ); //This centers the screen on the restaurant scene with the table located in it... if not located at 0,0 then 
-        //part of the RestaurantPanel would show
-
-        //Here is the table
-        g2.setColor(Color.ORANGE);
-        g2.fillRect(table1Xpos, table1Ypos, tableWidth , tableHeight);//200 and 250 need to be table params(they give the location of the table in the panel.
-        //50 and 50 give the dimensions of the table width and length respectively
-        g2.setColor(Color.ORANGE);
-        g2.fillRect(table2Xpos, table2Ypos, tableWidth , tableHeight);
-        
-        g2.setColor(Color.ORANGE);
-        g2.fillRect(table3Xpos, table3Ypos, tableWidth , tableHeight);
-        //g2.drawString(arg0, arg1, arg2);
-        
-        g2.setColor(Color.CYAN);
-        g2.fillRect(cashierXpos, cashierYpos, cashierWidth , cashierHeight);
-        
-        g2.setColor(Color.lightGray);
-        g2.fillRect(kitchenXpos, kitchenYpos, kitchenWidth, kitchenHeight);
-        
-        g2.setColor(Color.DARK_GRAY);
-        g2.fillRect(grillXpos, grillYpos, grillWidth, grillHeight);
-        
-        g2.setColor(Color.YELLOW);
-        g2.fillRect(cookXpos, cookYpos, cookWidth, cookHeight);
-        for(Gui gui : guis) {
-            if (gui.isPresent()) {
-                gui.updatePosition();
-            }
-        }
-
-        for(Gui gui : guis) {
-            if (gui.isPresent()) {
-                gui.draw(g2);
-            }
-        }
-    }
-
-    public void addGui(CustomerGui gui) {
-        guis.add(gui);
-    }
-
-    public void addGui(HostGui gui) {
-        guis.add(gui);
-    }
-
-	public void addGui(WaiterGui gui) {
-		guis.add(gui);
-		
-	}
-}
diff --git a/src/restaurant/restaurant_jerryweb/gui/CustomerGui.java b/src/restaurant/restaurant_jerryweb/gui/CustomerGui.java
index 594edba..4e8b132 100644
--- a/src/restaurant/restaurant_jerryweb/gui/CustomerGui.java
+++ b/src/restaurant/restaurant_jerryweb/gui/CustomerGui.java
@@ -20,16 +20,16 @@ public class CustomerGui implements Gui{
 	private Command command=Command.noCommand;
 
     public static final int xTable1 = 200;
-    public static final int yTable1 = 250;
+    public static final int yTable1 = 350;
 	
 	public static final int  xTable2 = 310;
-	public static final int  yTable2 = 185;
+	public static final int  yTable2 = 285;
 
 	public static final int  xTable3 = 370;
-	public static final int  yTable3 = 100;
+	public static final int  yTable3 = 175;
 	
 	static final int cashierXpos = 50;
-	static final int cashierYpos = 200;
+	static final int cashierYpos = 320;
 	
 	public String customerString = "";
 	
diff --git a/src/restaurant/restaurant_jerryweb/gui/JerrywebAnimationPanel.java b/src/restaurant/restaurant_jerryweb/gui/JerrywebAnimationPanel.java
index 0b23472..991df0a 100644
--- a/src/restaurant/restaurant_jerryweb/gui/JerrywebAnimationPanel.java
+++ b/src/restaurant/restaurant_jerryweb/gui/JerrywebAnimationPanel.java
@@ -22,13 +22,13 @@ public class JerrywebAnimationPanel extends CityCard implements ActionListener{
 	static final int tableWidth = 50;
 	static final int tableHeight = 50;
 	static final int table1Xpos = 200;
-	static final int table1Ypos = 250;
+	static final int table1Ypos = 350;
 	
 	static final int table2Xpos = 310;
-	static final int table2Ypos = 185;
+	static final int table2Ypos = 285;
 
 	static final int table3Xpos = 370;
-	static final int table3Ypos = 100;
+	static final int table3Ypos = 175;
 	
 	static final int kitchenXpos = 225;
 	static final int kitchenYpos = 50;
@@ -41,7 +41,7 @@ public class JerrywebAnimationPanel extends CityCard implements ActionListener{
 	static final int grillHeight = 20;
 	
 	static final int cashierXpos = 50;
-	static final int cashierYpos = 200;
+	static final int cashierYpos = 320;
 	static final int cashierWidth = 20;
 	static final int cashierHeight = 20;
 	
diff --git a/src/restaurant/restaurant_jerryweb/gui/JerrywebRestaurantGui.java b/src/restaurant/restaurant_jerryweb/gui/JerrywebRestaurantGui.java
deleted file mode 100644
index 787fb48..0000000
--- a/src/restaurant/restaurant_jerryweb/gui/JerrywebRestaurantGui.java
+++ /dev/null
@@ -1,195 +0,0 @@
-package  restaurant.restaurant_jerryweb.gui;
-
-import java.awt.GridLayout;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-
-import javax.swing.JButton;
-import javax.swing.JCheckBox;
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-
-import restaurant.restaurant_jerryweb.JerrywebCustomerRole;
-import city.gui.CityCard;
-import city.gui.SimCityGui;
-/**
- * Main GUI class.
- * Contains the main frame and subsequent panels
- */
-public class JerrywebRestaurantGui extends CityCard implements ActionListener {
-    /* The GUI has two frames, the control frame (in variable gui) 
-     * and the animation frame, (in variable animationFrame within gui)
-     */
-	JFrame animationFrame = new JFrame("Restaurant Animation");
-	JerrywebAnimationPanel animationPanel = new JerrywebAnimationPanel(city);
-	
-    /* restPanel holds 2 panels
-     * 1) the staff listing, menu, and lists of current customers all constructed
-     *    in RestaurantPanel()
-     * 2) the infoPanel about the clicked Customer (created just below)
-     */    
-    public JerrywebRestaurantPanel restPanel;
-    
-    /* infoPanel holds information about the clicked customer, if there is one*/
-    private JPanel infoPanel;
-    private JLabel infoLabel; //part of infoPanel
-    private JCheckBox stateCB;//part of infoLabel
-    //private JTextField addCustName = new JTextField(10);
-    private JButton pause = new JButton("pause");
-    //private JButton pause = new JButton("Request Break");
-    
-    static final int rows = 1;
-    static final int cols = 2;
-    static final int hSpacing = 30;
-    static final int vSpacing = 0;
-    static final int xIndexing = 50;
-    static final int yIndexing = 50;
-    
-    private Object currentPerson;/* Holds the agent that the info is about.
-    								Seems like a hack */
-
-    /**
-     * Constructor for RestaurantGui class.
-     * Sets up all the gui components.
-     */
-    public JerrywebRestaurantGui(SimCityGui city) {
-    	super(city);
-    	restPanel = new JerrywebRestaurantPanel(this);
-        int WINDOWX = 500;
-        int WINDOWY = 500;
-
-        animationFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-        animationFrame.setBounds(WINDOWX, yIndexing , WINDOWX, WINDOWY);
-        animationFrame.setVisible(false);
-    	add(animationPanel); 
-    	
-    	setBounds(xIndexing, yIndexing, WINDOWX, WINDOWY);
-
-        setLayout(new GridLayout(1,2));
-    }
-        /*
-        Dimension restDim = new Dimension(WINDOWX+150, (int) (WINDOWY * .6));
-        restPanel.setPreferredSize(restDim);
-        restPanel.setMinimumSize(restDim);
-        restPanel.setMaximumSize(restDim);
-        add(restPanel);
-        
-        // Now, setup the info panel
-        Dimension infoDim = new Dimension(WINDOWX, (int) (WINDOWY * .25));
-        infoPanel = new JPanel();
-        infoPanel.setPreferredSize(infoDim);
-        infoPanel.setMinimumSize(infoDim);
-        infoPanel.setMaximumSize(infoDim);
-        infoPanel.setBorder(BorderFactory.createTitledBorder("Information"));
-       
-        
-        pause.addActionListener(new ActionListener(){
-
-			@Override
-			public void actionPerformed(ActionEvent arg0) {
-				// TODO Auto-generated method stub
-				//restPanel.pauseAgents();
-			}
-        	
-       });
-        
-        stateCB = new JCheckBox();
-        stateCB.setVisible(false);
-        stateCB.addActionListener(this);
-        //restPanel.getLpChbx().addActionListener(this);
-        
-        
-        
-        
-        infoPanel.setLayout(new GridLayout(rows, cols, hSpacing, vSpacing));
-        
-        infoLabel = new JLabel(); 
-        infoLabel.setText("<html><pre><i>Click to pause.</i></pre></html>");
-        infoPanel.add(infoLabel);
-        infoPanel.add(pause);
-        add(infoPanel);
-    }
-    
-    
-    
-    /**
-     * updateInfoPanel() takes the given customer (or, for v3, Host) object and
-     * changes the information panel to hold that person's info.
-     *
-     * @param person customer (or waiter) object
-     */
-    public void updateInfoPanel(Object person) {
-        stateCB.setVisible(true);
-        currentPerson = person;
-       
-        if (person instanceof JerrywebCustomerRole) {
-            JerrywebCustomerRole customer = (JerrywebCustomerRole) person;
-            stateCB.setText("Hungry?");
-          //Should checkmark be there? 
-
-            stateCB.setSelected( restPanel.getLpChbx().isSelected() );
-          //Is customer hungry? Hack. Should ask customerGui
-            stateCB.setEnabled(! restPanel.getLpChbx().isSelected() );
-            
-          // Hack. Should ask customerGui
-            infoLabel.setText(
-               "<html><pre>     Name: " + customer.getName() + " </pre></html>");
-        }
-        infoPanel.validate();
-    }
-    /**
-     * Action listener method that reacts to the checkbox being clicked;
-     * If it's the customer's checkbox, it will make him hungry
-     * For v3, it will propose a break for the waiter.
-     */
-    public void actionPerformed(ActionEvent e) {
-        if (e.getSource() == stateCB) {
-    	//if( restPanel.getListPanel() ){
-            if (currentPerson instanceof JerrywebCustomerRole) {
-                JerrywebCustomerRole c = (JerrywebCustomerRole) currentPerson;
-                c.getGui().setHungry();
-                stateCB.setEnabled(false);
-            }
-        }
-    }
-    
-
-    
-    public void originalChbx() {
-
-            if (currentPerson instanceof JerrywebCustomerRole) {
-                JerrywebCustomerRole c = (JerrywebCustomerRole) currentPerson;
-                c.getGui().setHungry();
-                stateCB.setEnabled(false);
-            }
-        }
-    
-    
-    /**
-     * Message sent from a customer gui to enable that customer's
-     * "I'm hungry" checkbox.
-     *
-     * @param c reference to the customer
-     */
-    public void setCustomerEnabled(JerrywebCustomerRole c) {
-        if (currentPerson instanceof JerrywebCustomerRole) {
-            JerrywebCustomerRole cust = (JerrywebCustomerRole) currentPerson;
-            if (c.equals(cust)) {
-            	restPanel.getLpChbx().setEnabled(true);
-            	restPanel.getLpChbx().setSelected(false);
-
-            }
-        }
-    }
-    /**
-     * Main routine to get gui started
-     *//*
-    public static void main(String[] args) {
-        RestaurantGui gui = new RestaurantGui();
-        gui.setTitle("csci201 Restaurant");
-        gui.setVisible(true);
-        gui.setResizable(false);
-        gui.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-    }*/
-}
diff --git a/src/restaurant/restaurant_jerryweb/gui/JerrywebRestaurantPanel.java b/src/restaurant/restaurant_jerryweb/gui/JerrywebRestaurantPanel.java
deleted file mode 100644
index caa4278..0000000
--- a/src/restaurant/restaurant_jerryweb/gui/JerrywebRestaurantPanel.java
+++ /dev/null
@@ -1,233 +0,0 @@
-package restaurant.restaurant_jerryweb.gui;
-
-
-import java.awt.BorderLayout;
-import java.awt.Container;
-import java.awt.GridLayout;
-import java.util.Vector;
-
-import javax.swing.BorderFactory;
-import javax.swing.BoxLayout;
-import javax.swing.JCheckBox;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-
-import restaurant.restaurant_jerryweb.JerrywebCashierRole;
-import restaurant.restaurant_jerryweb.JerrywebCookRole;
-import restaurant.restaurant_jerryweb.JerrywebCustomerRole;
-import restaurant.restaurant_jerryweb.JerrywebHostRole;
-import restaurant.restaurant_jerryweb.JerrywebRSWaiterRole;
-import restaurant.restaurant_jerryweb.JerrywebWaiterRole;
-import restaurant.restaurant_jerryweb.interfaces.Waiter;
-import base.BaseRole;
-
-/**
- * Panel in frame that contains all the restaurant information,
- * including host, cook, waiters, and customers.
- */
-public class JerrywebRestaurantPanel extends JPanel  {
-	static final int rows = 1;
-	static final int cols = 2;
-	static final int hSpacing = 5;
-	static final int vSpacing = 5;
-	int sel = 0;
-    //Host, cook, waiters and customers
-    public static JerrywebHostRole host=  new JerrywebHostRole("Sarah");
-    public HostGui hostGui = new HostGui(host);
-    //public PersonAgent mPerson = new PersonAgent(EnumJobType.RESTAURANT,20,"Joe");
-
-    
-	public static JerrywebCookRole cook;
-    public static JerrywebCashierRole cashier = new JerrywebCashierRole("Ted Cruz");
-    
-    private Vector<JerrywebCustomerRole> customers = new Vector<JerrywebCustomerRole>();
-    private Vector<Waiter> waiters = new Vector<Waiter>();
-    
-    private JPanel restLabel = new JPanel();
-    private ListPanel customerPanel = new ListPanel(this, "Customers");
-    private WaiterListPanel WaiterPanel = new WaiterListPanel(this, "Waiters");
-    private JPanel group = new JPanel();
-    private JPanel group2 = new JPanel();
-
-    public static JerrywebRestaurantGui gui; //reference to main gui
-   
-    public JerrywebRestaurantPanel(JerrywebRestaurantGui gui){//,JerrywebHostRole h) {
-    	//host = h;
-        this.gui = gui;
-        host.setGui(hostGui);
-
-        gui.animationPanel.addGui(hostGui);
-        //host.startThread();
-        /*
-        for(int i=0;i<3; i++){
-           //private HostGui hostGui = new HostGui(host);
-        	JerrywebMarketRole market = new JerrywebMarketRole(null);
-        	market.setCook(cook);
-        	cook.addMarket(market);
-        	market.setCashier(cashier);
-        	//market.startThread();
-        }*/
-            
-        //JerrywebWaiterRole w = new JerrywebWaiterRole(mPerson);
-        //this.addWaiter(w);
-        
-
-        setLayout(new GridLayout(rows, cols,  hSpacing,  vSpacing));
-        group.setLayout(new GridLayout(rows, cols,  hSpacing,  vSpacing));
-        group2.setLayout(new GridLayout(rows, cols,  hSpacing,  vSpacing));
-
-        group.add(customerPanel);
-        group2.add(WaiterPanel);
-        initRestLabel();
-        add(restLabel);
-        add(group2);
-        add(group);
-        
-    }
-
-    
-    
-   public JCheckBox getLpChbx (){
-	   	return customerPanel.getChbx();
-   }
-    /**
-     * Sets up the restaurant label that includes the menu,
-     * and host and cook information
-     */
-    private void initRestLabel() {
-        JLabel label = new JLabel();
-        restLabel.setLayout(new BoxLayout((Container)restLabel, BoxLayout.Y_AXIS));
-        restLabel.setLayout(new BorderLayout());
-        label.setText(
-                "<html><h3><u>Tonight's Staff</u></h3><table><tr><td>host:</td><td>" + host.getName() + "</td></tr></table><h3><u> Menu</u></h3><table><tr><td>Steak</td><td>$15.99</td></tr><tr><td>Chicken</td><td>$10.99</td></tr><tr><td>Salad</td><td>$5.99</td></tr><tr><td>Pizza</td><td>$8.99</td></tr></table><br></html>");
-
-        restLabel.setBorder(BorderFactory.createRaisedBevelBorder());
-        restLabel.add(label, BorderLayout.CENTER);
-        restLabel.add(new JLabel("               "), BorderLayout.EAST);
-        restLabel.add(new JLabel("               "), BorderLayout.WEST);
-    }
-
-
-    /**
-     * When a customer or waiter is clicked, this function calls
-     * updatedInfoPanel() from the main gui so that person's information
-     * will be shown
-     *
-     * @param type indicates whether the person is a customer or waiter
-     * @param name name of person
-     */
-    public void showInfo(String type, String name) {
-
-        if (type.equals("Customers")) {
-
-            for (int i = 0; i < customers.size(); i++) {
-                JerrywebCustomerRole temp = customers.get(i);
-                if (temp.getName() == name)
-                    gui.updateInfoPanel(temp);
-            }
-        }
-        if (type.equals("Waiters")) {
-
-            for (int i = 0; i < waiters.size(); i++) {
-                Waiter temp = waiters.get(i);
-                if (temp.getName() == name)
-                    gui.updateInfoPanel(temp);
-            }
-        }
-    }
-    
-    public void RPorginalChbx() {
-    	gui.originalChbx();
-    }
-    
-   
-    public void RpBreakChbx(int i){
-    	waiters.get(i).msgAskForBreak();
-    }
-    
-    public JerrywebCustomerRole getCustomer(int index){
-    	return customers.get(index);
-    }
-
-    /**
-     * Adds a customer or waiter to the appropriate list
-     *
-     * @param type indicates whether the person is a customer or waiter (later)
-     * @param subRole name of person
-     */
-    public static void addWaiter(JerrywebWaiterRole w){
-    	//JerrywebWaiterRole w = (JerrywebWaiterRole) role;
-		WaiterGui wg = new WaiterGui(w, gui, host);//may need to fix this
-		w.setGui(wg);
-		host.addWaiter(w);
-		w.setHost(host);
-		w.setCook(cook);
-    	w.setCashier(cashier);
-    	gui.animationPanel.addGui(wg);
-    }
-    
-    public static void addRSWaiter(JerrywebRSWaiterRole rsw){
-    	//JerrywebRSWaiterRole rsw = (JerrywebRSWaiterRole) role;
-		WaiterGui wg = new WaiterGui(rsw, gui, host);//may need to fix this
-		rsw.setGui(wg);
-		host.addWaiter(rsw);
-		rsw.setHost(host);
-		rsw.setCook(cook);
-    	rsw.setCashier(cashier);
-    	gui.animationPanel.addGui(wg);
-    }
-    
-    public void addPerson(BaseRole role) {
-
-    	if (role instanceof JerrywebCustomerRole) {
-    		JerrywebCustomerRole c = (JerrywebCustomerRole) role;	
-    		CustomerGui g = new CustomerGui(c, gui);
-
-    		gui.animationPanel.addGui(g);
-    		c.setHost(host);
-    		c.setCashier(cashier);
-    		c.setGui(g);
-    		customers.add(c);
-    		g.setHungry();
-    	}
-    	else if(role instanceof JerrywebWaiterRole){
-    		sel++;
-    		if((sel)%2 == 0){
-    			JerrywebRSWaiterRole rsw = (JerrywebRSWaiterRole) role;
-    			WaiterGui wg = new WaiterGui(rsw, gui, host);//may need to fix this
-    			rsw.setGui(wg);
-    			host.addWaiter(rsw);
-    			rsw.setHost(host);
-    			rsw.setCook(cook);
-            	rsw.setCashier(cashier);
-            	gui.animationPanel.addGui(wg);
-            	
-    		}
-    		else{ 
-    			JerrywebWaiterRole w = (JerrywebWaiterRole)role;
-    			WaiterGui wg = new WaiterGui(w, gui, host);//may need to fix this
-    			w.setGui(wg);
-    			host.addWaiter(w);
-    			w.setHost(host);
-    			w.setCook(cook);
-    			w.setCashier(cashier);
-    			gui.animationPanel.addGui(wg);
-    
-    		}
-    	}
-    	
-    	else if (role instanceof JerrywebHostRole){
-    		host = (JerrywebHostRole) role;
-    	}
-    	
-       	else if (role instanceof JerrywebCookRole){
-    		cook = (JerrywebCookRole) role;
-    	}
-    	
-       	else if (role instanceof JerrywebCashierRole){
-    		cashier = (JerrywebCashierRole) role;
-    	}
-    	
-    }
-
-}
diff --git a/src/restaurant/restaurant_jerryweb/gui/ListPanel.java b/src/restaurant/restaurant_jerryweb/gui/ListPanel.java
deleted file mode 100644
index af488b4..0000000
--- a/src/restaurant/restaurant_jerryweb/gui/ListPanel.java
+++ /dev/null
@@ -1,166 +0,0 @@
-package restaurant.restaurant_jerryweb.gui;
-
-import java.awt.Container;
-import java.awt.GridLayout;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.swing.BoxLayout;
-import javax.swing.JButton;
-import javax.swing.JCheckBox;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JScrollPane;
-import javax.swing.JTextField;
-
-/**
- * Subpanel of restaurantPanel.
- * This holds the scroll panes for the customers and, later, for waiters
- */
-public class ListPanel extends JPanel implements ActionListener {
-
-    public JScrollPane pane =
-            new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
-                    JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
-    private JPanel view = new JPanel();
-    private List<JButton> list = new ArrayList<JButton>();
-    private List<JCheckBox> chbxList = new ArrayList<JCheckBox>();
-    private JButton addPersonB = new JButton("Add");
-    private JButton addWaiter = new JButton("Add");
-    
-    private JTextField jtfName = new JTextField(10);
-    private JCheckBox preHungrychbx;
-    private JCheckBox hungrychbx; 
-    static final int rows = 1;
-    static final int cols = 3;
-    static final int hSpacing = 20;
-	static final int vSpacing = 10;
-    
-    private JerrywebRestaurantPanel restPanel;
-    private String type;
-
-    /**
-     * Constructor for ListPanel.  Sets up all the gui
-     *
-     * @param rp   reference to the restaurant panel
-     * @param type indicates if this is for customers or waiters
-     */
-    public ListPanel(JerrywebRestaurantPanel rp, String type) {
-        restPanel = rp;
-        this.type = type;
-
-        
-        setLayout(new BoxLayout((Container) this, BoxLayout.Y_AXIS));
-        add(new JLabel("<html><pre> <u>" + type + "</u><br></pre></html>"));
-        
-        JPanel custAdd = new JPanel();
-        custAdd.setLayout(new GridLayout( rows, cols)); 
-        
-        preHungrychbx = new JCheckBox();        
-        preHungrychbx.setVisible(true);
-
-        addWaiter.addActionListener(this);
-        addPersonB.addActionListener(this);
-        
-        
-        custAdd.add(jtfName);
-        custAdd.add(addPersonB);
-        //custAdd.add(preHungrychbx);
-        add(custAdd);
-        
-        
-        
-        view.setLayout(new BoxLayout((Container) view, BoxLayout.Y_AXIS));
-        pane.setViewportView(view);
-        add(pane);
-    	
-        }
-    public JCheckBox getChbx (){
-    	return hungrychbx;
-    }
-
-    /**
-     * Method from the ActionListener interface.
-     * Handles the event of the add button being pressed
-     */
-
-    public void actionPerformed(ActionEvent e) {
-        if (e.getSource() == addPersonB) {
-        	// Chapter 2.19 describes showInputDialog()
-        	if(jtfName.getText().length() != 0){
-
-        		addPerson(jtfName.getText());
-        		jtfName.setText(null);
-
-        		preHungrychbx.setSelected(false);
-        	}
-        }
-        
-        else {
-        	// Isn't the second for loop more beautiful?
-            /*for (int i = 0; i < list.size(); i++) {
-                JButton temp = list.get(i);*/
-        	for (JButton temp:list){
-                if (e.getSource() == temp)
-                    restPanel.showInfo(type, temp.getText());
-            }
-        	for(int i = 0; i <chbxList.size(); i++){
-        		JCheckBox tempBox = chbxList.get(i);
-        		if (e.getSource() == tempBox){
-        			if(tempBox.getText() == restPanel.getCustomer(i).getName()){
-        				restPanel.getCustomer(i).getGui().setHungry();
-        				//restPanel.getCustomer(i).gotHungry();
-        				chbxList.get(i).setEnabled(false);
-        			}
-        		}
-        	}
-        }
-    }
-    
-
-
-    /**
-     * If the add button is pressed, this function creates
-     * a spot for it in the scroll pane, and tells the restaurant panel
-     * to add a new person.
-     *
-     * @param name name of new person
-     */
-    public void addPerson(String name) {
-        if (name != null) {
-        	JPanel customerList = new JPanel();
-        	customerList.setLayout(new GridLayout(1,2));
-        	
-        	JButton button = new JButton(name);
-        	hungrychbx = new JCheckBox();
-        	chbxList.add(hungrychbx);
-           /* button.setBackground(Color.white);
-
-            Dimension paneSize = pane.getSize();
-            Dimension buttonSize = new Dimension(5,5);
-            button.setPreferredSize(buttonSize);
-            button.setMinimumSize(buttonSize);
-            button.setMaximumSize(buttonSize);
-            button.addActionListener(this);*/
-        	//customerList.add(button);
-            hungrychbx.addActionListener(this);
-            hungrychbx.setText(name);
-            customerList.add(hungrychbx);
-            hungrychbx.setVisible(true);
-            hungrychbx.setEnabled(true);
-
-            if(hungrychbx.isSelected()){
-            	restPanel.RPorginalChbx();//.setSelected(true);
-            	//hungrychbx.setSelected(true);
-            }
-
-            view.add(customerList);
-            //restPanel.addPerson(type, name);//puts customer on list
-            restPanel.showInfo(type, name);//puts hungry button on panel
-            validate();
-        }
-    }
-
-}
diff --git a/src/restaurant/restaurant_jerryweb/gui/RestaurantGui.java b/src/restaurant/restaurant_jerryweb/gui/RestaurantGui.java
deleted file mode 100644
index a043ce1..0000000
--- a/src/restaurant/restaurant_jerryweb/gui/RestaurantGui.java
+++ /dev/null
@@ -1,196 +0,0 @@
-package  restaurant.restaurant_jerryweb.gui;
-
-import java.awt.Container;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-
-import javax.swing.BoxLayout;
-import javax.swing.JButton;
-import javax.swing.JCheckBox;
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-
-import restaurant.restaurant_jerryweb.CustomerRole;
-import city.gui.CityCard;
-import city.gui.SimCityGui;
-/**
- * Main GUI class.
- * Contains the main frame and subsequent panels
- */
-public class RestaurantGui extends CityCard implements ActionListener {
-    /* The GUI has two frames, the control frame (in variable gui) 
-     * and the animation frame, (in variable animationFrame within gui)
-     */
-	JFrame animationFrame = new JFrame("Restaurant Animation");
-	AnimationPanel animationPanel = new AnimationPanel();
-	
-    /* restPanel holds 2 panels
-     * 1) the staff listing, menu, and lists of current customers all constructed
-     *    in RestaurantPanel()
-     * 2) the infoPanel about the clicked Customer (created just below)
-     */    
-    private RestaurantPanel restPanel;// = new RestaurantPanel(this);
-    
-    /* infoPanel holds information about the clicked customer, if there is one*/
-    private JPanel infoPanel;
-    private JLabel infoLabel; //part of infoPanel
-    private JCheckBox stateCB;//part of infoLabel
-    //private JTextField addCustName = new JTextField(10);
-    private JButton pause = new JButton("pause");
-    //private JButton pause = new JButton("Request Break");
-    
-    static final int rows = 1;
-    static final int cols = 2;
-    static final int hSpacing = 30;
-    static final int vSpacing = 0;
-    static final int xIndexing = 50;
-    static final int yIndexing = 50;
-    
-    private Object currentPerson;/* Holds the agent that the info is about.
-    								Seems like a hack */
-
-    /**
-     * Constructor for RestaurantGui class.
-     * Sets up all the gui components.
-     */
-    public RestaurantGui(SimCityGui city) {
-    	super(city);
-        int WINDOWX = 450;
-        int WINDOWY = 500;
-
-        animationFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-        animationFrame.setBounds(WINDOWX, yIndexing , WINDOWX, WINDOWY);
-        animationFrame.setVisible(false);
-    	add(animationPanel); 
-    	
-    	setBounds(xIndexing, yIndexing, WINDOWX, WINDOWY);
-
-        setLayout(new BoxLayout((Container) getRootPane(), 
-        		BoxLayout.Y_AXIS));
-    }
-        /*
-        Dimension restDim = new Dimension(WINDOWX+150, (int) (WINDOWY * .6));
-        restPanel.setPreferredSize(restDim);
-        restPanel.setMinimumSize(restDim);
-        restPanel.setMaximumSize(restDim);
-        add(restPanel);
-        
-        // Now, setup the info panel
-        Dimension infoDim = new Dimension(WINDOWX, (int) (WINDOWY * .25));
-        infoPanel = new JPanel();
-        infoPanel.setPreferredSize(infoDim);
-        infoPanel.setMinimumSize(infoDim);
-        infoPanel.setMaximumSize(infoDim);
-        infoPanel.setBorder(BorderFactory.createTitledBorder("Information"));
-       
-        
-        pause.addActionListener(new ActionListener(){
-
-			@Override
-			public void actionPerformed(ActionEvent arg0) {
-				// TODO Auto-generated method stub
-				//restPanel.pauseAgents();
-			}
-        	
-       });
-        
-        stateCB = new JCheckBox();
-        stateCB.setVisible(false);
-        stateCB.addActionListener(this);
-        //restPanel.getLpChbx().addActionListener(this);
-        
-        
-        
-        
-        infoPanel.setLayout(new GridLayout(rows, cols, hSpacing, vSpacing));
-        
-        infoLabel = new JLabel(); 
-        infoLabel.setText("<html><pre><i>Click to pause.</i></pre></html>");
-        infoPanel.add(infoLabel);
-        infoPanel.add(pause);
-        add(infoPanel);
-    }
-    
-    
-    
-    /**
-     * updateInfoPanel() takes the given customer (or, for v3, Host) object and
-     * changes the information panel to hold that person's info.
-     *
-     * @param person customer (or waiter) object
-     */
-    public void updateInfoPanel(Object person) {
-        stateCB.setVisible(true);
-        currentPerson = person;
-       
-        if (person instanceof CustomerRole) {
-            CustomerRole customer = (CustomerRole) person;
-            stateCB.setText("Hungry?");
-          //Should checkmark be there? 
-
-            stateCB.setSelected( restPanel.getLpChbx().isSelected() );
-          //Is customer hungry? Hack. Should ask customerGui
-            stateCB.setEnabled(! restPanel.getLpChbx().isSelected() );
-            
-          // Hack. Should ask customerGui
-            infoLabel.setText(
-               "<html><pre>     Name: " + customer.getName() + " </pre></html>");
-        }
-        infoPanel.validate();
-    }
-    /**
-     * Action listener method that reacts to the checkbox being clicked;
-     * If it's the customer's checkbox, it will make him hungry
-     * For v3, it will propose a break for the waiter.
-     */
-    public void actionPerformed(ActionEvent e) {
-        if (e.getSource() == stateCB) {
-    	//if( restPanel.getListPanel() ){
-            if (currentPerson instanceof CustomerRole) {
-                CustomerRole c = (CustomerRole) currentPerson;
-                c.getGui().setHungry();
-                stateCB.setEnabled(false);
-            }
-        }
-    }
-    
-
-    
-    public void originalChbx() {
-
-            if (currentPerson instanceof CustomerRole) {
-                CustomerRole c = (CustomerRole) currentPerson;
-                c.getGui().setHungry();
-                stateCB.setEnabled(false);
-            }
-        }
-    
-    
-    /**
-     * Message sent from a customer gui to enable that customer's
-     * "I'm hungry" checkbox.
-     *
-     * @param c reference to the customer
-     */
-    public void setCustomerEnabled(CustomerRole c) {
-        if (currentPerson instanceof CustomerRole) {
-            CustomerRole cust = (CustomerRole) currentPerson;
-            if (c.equals(cust)) {
-            	restPanel.getLpChbx().setEnabled(true);
-            	restPanel.getLpChbx().setSelected(false);
-
-            }
-        }
-    }
-    /**
-     * Main routine to get gui started
-     *//*
-    public static void main(String[] args) {
-        RestaurantGui gui = new RestaurantGui();
-        gui.setTitle("csci201 Restaurant");
-        gui.setVisible(true);
-        gui.setResizable(false);
-        gui.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-    }*/
-}
diff --git a/src/restaurant/restaurant_jerryweb/gui/RestaurantPanel.java b/src/restaurant/restaurant_jerryweb/gui/RestaurantPanel.java
deleted file mode 100644
index 57c8a4f..0000000
--- a/src/restaurant/restaurant_jerryweb/gui/RestaurantPanel.java
+++ /dev/null
@@ -1,215 +0,0 @@
-package restaurant.restaurant_jerryweb.gui;
-
-
-import java.awt.BorderLayout;
-import java.awt.Container;
-import java.awt.GridLayout;
-import java.util.Vector;
-
-import javax.swing.BorderFactory;
-import javax.swing.BoxLayout;
-import javax.swing.JCheckBox;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-
-import restaurant.restaurant_jerryweb.CashierRole;
-import restaurant.restaurant_jerryweb.CookRole;
-import restaurant.restaurant_jerryweb.CustomerRole;
-import restaurant.restaurant_jerryweb.HostRole;
-import restaurant.restaurant_jerryweb.MarketRole;
-import restaurant.restaurant_jerryweb.RSWaiterRole;
-import restaurant.restaurant_jerryweb.WaiterRole;
-import restaurant.restaurant_jerryweb.interfaces.Waiter;
-
-/**
- * Panel in frame that contains all the restaurant information,
- * including host, cook, waiters, and customers.
- */
-public class RestaurantPanel extends JPanel {
-	static final int rows = 1;
-	static final int cols = 2;
-	static final int hSpacing = 5;
-	static final int vSpacing = 5;
-	int sel = 0;
-    //Host, cook, waiters and customers
-    private HostRole host = new HostRole("Sarah");
-    //private HostGui hostGui = new HostGui(host);
-
-    
-    private CookRole cook = new CookRole("Bob Sagget");
-    private CashierRole cashier = new CashierRole("Ted Cruz");
-    
-    private Vector<CustomerRole> customers = new Vector<CustomerRole>();
-    private Vector<Waiter> waiters = new Vector<Waiter>();
-    
-    private JPanel restLabel = new JPanel();
-    private ListPanel customerPanel;// = new ListPanel(this, "Customers");
-    private WaiterListPanel WaiterPanel;// = new WaiterListPanel(this, "Waiters");
-    private JPanel group = new JPanel();
-    private JPanel group2 = new JPanel();
-
-    private JerrywebRestaurantGui gui; //reference to main gui
-    
-    public RestaurantPanel(JerrywebRestaurantGui gui) {
-        this.gui = gui;
-        //host.setGui(hostGui);
-
-        //gui.animationPanel.addGui(hostGui);
-        host.startThread();
-        
-        for(int i=0;i<3; i++){
-           //private HostGui hostGui = new HostGui(host);
-        	MarketRole market = new MarketRole("Market " + i);
-        	market.setCook(cook);
-        	cook.addMarket(market);
-        	market.setCashier(cashier);
-        	market.startThread();
-        }
-        cook.startThread();
-        cashier.startThread();
-        
-        
-        setLayout(new GridLayout(rows, cols,  hSpacing,  vSpacing));
-        group.setLayout(new GridLayout(rows, cols,  hSpacing,  vSpacing));
-        group2.setLayout(new GridLayout(rows, cols,  hSpacing,  vSpacing));
-
-        group.add(customerPanel);
-        group2.add(WaiterPanel);
-        initRestLabel();
-        add(restLabel);
-        add(group2);
-        add(group);
-        
-    }
-   /* public void pauseAgents(){
-    	host.pausePrint();
-	if(!host.paused){
- 
-    		for(CustomerAgent c: customers){
-    			c.paused();
-    		}
-    		for(WaiterAgent w: waiters){
-    			w.paused();
-    		}
-    		host.paused();
-    	}
-    	else{
-    		host.restart();
-        	for(CustomerAgent c: customers){
-        		c.restart();
-        	}
-        	for(WaiterAgent w: waiters){
-    			w.restart();
-    		}
-    	}
-    }*/
-   public JCheckBox getLpChbx (){
-	   	return customerPanel.getChbx();
-   }
-    /**
-     * Sets up the restaurant label that includes the menu,
-     * and host and cook information
-     */
-    private void initRestLabel() {
-        JLabel label = new JLabel();
-        restLabel.setLayout(new BoxLayout((Container)restLabel, BoxLayout.Y_AXIS));
-        restLabel.setLayout(new BorderLayout());
-        label.setText(
-                "<html><h3><u>Tonight's Staff</u></h3><table><tr><td>host:</td><td>" + host.getName() + "</td></tr></table><h3><u> Menu</u></h3><table><tr><td>Steak</td><td>$15.99</td></tr><tr><td>Chicken</td><td>$10.99</td></tr><tr><td>Salad</td><td>$5.99</td></tr><tr><td>Pizza</td><td>$8.99</td></tr></table><br></html>");
-
-        restLabel.setBorder(BorderFactory.createRaisedBevelBorder());
-        restLabel.add(label, BorderLayout.CENTER);
-        restLabel.add(new JLabel("               "), BorderLayout.EAST);
-        restLabel.add(new JLabel("               "), BorderLayout.WEST);
-    }
-
-
-    /**
-     * When a customer or waiter is clicked, this function calls
-     * updatedInfoPanel() from the main gui so that person's information
-     * will be shown
-     *
-     * @param type indicates whether the person is a customer or waiter
-     * @param name name of person
-     */
-    public void showInfo(String type, String name) {
-
-        if (type.equals("Customers")) {
-
-            for (int i = 0; i < customers.size(); i++) {
-                CustomerRole temp = customers.get(i);
-                if (temp.getName() == name)
-                    gui.updateInfoPanel(temp);
-            }
-        }
-        if (type.equals("Waiters")) {
-
-            for (int i = 0; i < waiters.size(); i++) {
-                Waiter temp = waiters.get(i);
-                if (temp.getName() == name)
-                    gui.updateInfoPanel(temp);
-            }
-        }
-    }
-    
-    public void RPorginalChbx() {
-    	gui.originalChbx();
-    }
-    
-    public void RpBreakChbx(int i){
-    	waiters.get(i).msgAskForBreak();
-    }
-    
-    public CustomerRole getCustomer(int index){
-    	return customers.get(index);
-    }
-
-    /**
-     * Adds a customer or waiter to the appropriate list
-     *
-     * @param type indicates whether the person is a customer or waiter (later)
-     * @param name name of person
-     */
-    public void addPerson(String type, String name) {
-
-    	if (type.equals("Customers")) {
-    		CustomerRole c = new CustomerRole(name);	
-    		//CustomerGui g = new CustomerGui(c, gui);
-
-    		//gui.animationPanel.addGui(g);// dw
-    		c.setHost(host);
-    		c.setCashier(cashier);
-    		//c.setWaiter(waiter);
-    		//c.setGui(g);
-    		customers.add(c);
-    		c.startThread();
-    	}
-    	if(type.equals("Waiters")){
-    		sel++;
-    		if((sel)%2 == 0){
-    			RSWaiterRole rsw = new RSWaiterRole(name);
-    			//WaiterGui wg = new WaiterGui(rsw, gui, host);//may need to fix this
-    			//rsw.setGui(wg);
-    			host.addWaiter(rsw);//hack to add one waiter
-    			rsw.setHost(host);
-    			rsw.setCook(cook);
-            	rsw.setCashier(cashier);
-            	//gui.animationPanel.addGui(wg);
-            	rsw.startThread();
-            	
-    		}
-    		else{ 
-    			WaiterRole w = new WaiterRole(name);
-    			//WaiterGui wg = new WaiterGui(w, gui, host);//may need to fix this
-    			//w.setGui(wg);
-    			host.addWaiter(w);//hack to add one waiter
-    			w.setHost(host);
-    			w.setCook(cook);
-    			w.setCashier(cashier);
-    			//gui.animationPanel.addGui(wg);
-    			w.startThread();
-    		}
-    	}
-    }
-
-}
diff --git a/src/restaurant/restaurant_jerryweb/gui/WaiterGui.java b/src/restaurant/restaurant_jerryweb/gui/WaiterGui.java
index db0446c..a9ff378 100644
--- a/src/restaurant/restaurant_jerryweb/gui/WaiterGui.java
+++ b/src/restaurant/restaurant_jerryweb/gui/WaiterGui.java
@@ -21,19 +21,19 @@ public class WaiterGui implements Gui {
     private int xPos = -20, yPos = -20;//default waiter position
     private int xDestination = 120, yDestination = 35;//default start position
     public static final int xTable1 = 200;
-    public static final int yTable1 = 250;
+    public static final int yTable1 = 350;
 	
 	public static final int  xTable2 = 310;
-	public static final int  yTable2 = 185;
+	public static final int  yTable2 = 285;
 
 	public static final int  xTable3 = 370;
-	public static final int  yTable3 = 100;
+	public static final int  yTable3 = 175;
 	
 	public static final int  xCookLocation = 225;
 	public static final int  yCookLocation = 50;
 	
 	static final int cashierXpos = 50;
-	static final int cashierYpos = 200;
+	static final int cashierYpos = 320;
 	
 	public static final int xServeDestination1 = xTable1 + 22;
 	public static final int yServeDestination1 = yTable1 + 22;
@@ -47,6 +47,7 @@ public class WaiterGui implements Gui {
 	public int previousX = 0;
 	public int previousY = 0;
 	int idleSpotX = 0;
+	int idleSpotY = 0;
 	
 	static final int waiterWidth = 20;
 	static final int waiterHeight = 20;
@@ -76,6 +77,7 @@ public class WaiterGui implements Gui {
        agent = w;
        host = h;
         idleSpotX = 25*host.Waiters.size();
+        idleSpotY = 25*host.Waiters.size();
     }
 
     public void updatePosition() {
@@ -241,8 +243,8 @@ public class WaiterGui implements Gui {
     
     public void GoToIdleSpot() {
     	
-		xDestination = 145 - idleSpotX;
-		        yDestination = 35;
+		xDestination = 165 - idleSpotX;
+		yDestination = 35 + idleSpotY;
     }
     
     public void DoLeaveCustomer() {
diff --git a/src/restaurant/restaurant_jerryweb/gui/WaiterListPanel.java b/src/restaurant/restaurant_jerryweb/gui/WaiterListPanel.java
deleted file mode 100644
index f24df87..0000000
--- a/src/restaurant/restaurant_jerryweb/gui/WaiterListPanel.java
+++ /dev/null
@@ -1,152 +0,0 @@
-package  restaurant.restaurant_jerryweb.gui;
-
-import java.awt.Color;
-import java.awt.Container;
-import java.awt.Dimension;
-import java.awt.GridLayout;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.swing.BoxLayout;
-import javax.swing.JButton;
-import javax.swing.JCheckBox;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JScrollPane;
-import javax.swing.JTextField;
-
-/**
- * Subpanel of restaurantPanel.
- * This holds the scroll panes for the customers and, later, for waiters
- */
-public class WaiterListPanel extends JPanel implements ActionListener {
-
-    public JScrollPane pane =
-            new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
-                    JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
-    private JPanel view = new JPanel();
-    private List<JButton> list = new ArrayList<JButton>();
-    private List<JCheckBox> chbxList = new ArrayList<JCheckBox>();
-    private JButton addPersonB = new JButton("Add");
-    private JButton addWaiter = new JButton("Add");
-    private JCheckBox breakChbx;
-    
-    private JTextField jtfName = new JTextField(10);
-
-    static final int rows = 1;
-    static final int cols = 2;
-    static final int hSpacing = 20;
-	static final int vSpacing = 10;
-    
-    private JerrywebRestaurantPanel restPanel;
-    private String type;
-
-    /**
-     * Constructor for ListPanel.  Sets up all the gui
-     *
-     * @param rp   reference to the restaurant panel
-     * @param type indicates if this is for customers or waiters
-     */
-    public WaiterListPanel(JerrywebRestaurantPanel rp, String type) {
-        restPanel = rp;
-        this.type = type;
-
-        
-        setLayout(new BoxLayout((Container) this, BoxLayout.Y_AXIS));
-        add(new JLabel("<html><pre> <u>" + type + "</u><br></pre></html>"));
-        
-        JPanel waiterAdd = new JPanel();
-        waiterAdd.setLayout(new GridLayout( rows, cols)); 
-        
-        
-
-        
-        addWaiter.addActionListener(this);
-        addPersonB.addActionListener(this);
-        
-        
-        waiterAdd.add(jtfName);
-        waiterAdd.add(addPersonB);
-        add(waiterAdd);
-        
-        
-        
-        view.setLayout(new BoxLayout((Container) view, BoxLayout.Y_AXIS));
-        pane.setViewportView(view);
-        add(pane);
-    	
-        }
-    //
-      
-    /**
-     * Method from the ActionListener interface.
-     * Handles the event of the add button being pressed
-     */
-
-    public void actionPerformed(ActionEvent e) {
-        if (e.getSource() == addPersonB) {
-        	// Chapter 2.19 describes showInputDialog()
-        	if(jtfName.getText().length() != 0){
-        		
-        		addPerson(jtfName.getText());
-        		jtfName.setText(null);
-        		restPanel.showInfo(type, jtfName.getText());
-        		 
-        	}
-        }
-        
-        else {
-        	for (JButton temp:list){
-                if (e.getSource() == temp)
-                    restPanel.showInfo(type, temp.getText());
-            }
-        }
-    }
-    
-
-
-    /**
-     * If the add button is pressed, this function creates
-     * a spot for it in the scroll pane, and tells the restaurant panel
-     * to add a new person.
-     *
-     * @param name name of new person
-     */
-    public void addPerson(String name) {
-        if (name != null) {
-        	JPanel waiterList = new JPanel();
-        	waiterList.setLayout(new GridLayout(1,2));
-        	
-        	JButton button = new JButton(name);
-            button.setBackground(Color.white);
-            breakChbx = new JCheckBox();
-        	chbxList.add(breakChbx);
-            
-            
-            Dimension paneSize = pane.getSize();
-            Dimension buttonSize = new Dimension(3,3);
-            button.setPreferredSize(buttonSize);
-            button.setMinimumSize(buttonSize);
-            button.setMaximumSize(buttonSize);
-            button.addActionListener(this);
-            waiterList.add(button);
-
-            breakChbx.addActionListener(this);
-            breakChbx.setText("Break");
-            waiterList.add(breakChbx);
-            breakChbx.setVisible(true);
-            breakChbx.setEnabled(true);
-            for(int i = 0; i < chbxList.size(); i++){
-            	if(chbxList.get(i).isSelected()){
-            	 restPanel.RpBreakChbx(i);
-            	}
-            }
-            
-            view.add(waiterList);
-            //restPanel.addPerson(type, name);//puts waiter on list
-            validate();
-        }
-    }
-}
diff --git a/src/runconfig/restConfig7.txt b/src/runconfig/restConfig7.txt
index 38a80f9..031de47 100644
--- a/src/runconfig/restConfig7.txt
+++ b/src/runconfig/restConfig7.txt
@@ -8,21 +8,9 @@ BANK 200 guard4
 BANK 200 teller3
 BANK 200 teller4
 RESTAURANT 7 HOST 200 rPerson1
-RESTAURANT 7 HOST 200 rPerson2
-RESTAURANT 7 HOST 200 rPerson3
 RESTAURANT 7 COOK 200 rPerson4
-RESTAURANT 7 COOK 200 rPerson5
-RESTAURANT 7 COOK 200 rPerson6
 RESTAURANT 7 CASHIER 200 rPerson7
-RESTAURANT 7 CASHIER 200 rPerson8
-RESTAURANT 7 CASHIER 200 rPerson9
 RESTAURANT 7 WAITER 200 rPerson10
-RESTAURANT 7 WAITER 200 rPerson11
-RESTAURANT 7 WAITER 200 rPerson12
-RESTAURANT 7 WAITER 200 rPerson13
-RESTAURANT 7 WAITER 200 rPerson14
-RESTAURANT 7 WAITER 200 rPerson15
-RESTAURANT 7 WAITER 200 rPerson16
 RESTAURANT 7 WAITER 200 rPerson17
 RESTAURANT 7 WAITER 200 rPerson18
 RESTAURANT 7 CUSTOMER 200 rCustomer1
diff --git a/src/transportation/roles/CommuterRole.java b/src/transportation/roles/CommuterRole.java
index b9e62e8..70c491f 100644
--- a/src/transportation/roles/CommuterRole.java
+++ b/src/transportation/roles/CommuterRole.java
@@ -22,7 +22,7 @@ public class CommuterRole extends BaseRole implements TransportationRider {
 		ridingBus, exitingBus, noNewDestination};
 	private int mCurrentBusStop;
 	private int mDestinationBusStop; 
-	private PersonState mState = PersonState.walking;
+	public PersonState mState = PersonState.walking;
 	private TransportationBus mBus; 
 	
 	//CONSTRUCTOR
@@ -204,4 +204,5 @@ public class CommuterRole extends BaseRole implements TransportationRider {
 	public Location getLocation() {
 		return mCurrentLocation; 
 	}
+	
 }
diff --git a/src/transportation/test/BusRiderRoleTest.java b/src/transportation/test/BusRiderRoleTest.java
index ab69868..e702262 100644
--- a/src/transportation/test/BusRiderRoleTest.java
+++ b/src/transportation/test/BusRiderRoleTest.java
@@ -3,6 +3,7 @@ package transportation.test;
 import junit.framework.TestCase;
 import transportation.TransportationBus;
 import transportation.roles.CommuterRole;
+import transportation.test.mock.MockBus;
 import transportation.test.mock.MockCommuter;
 import base.ContactList;
 import base.PersonAgent;
@@ -18,6 +19,7 @@ import base.PersonAgent.EnumJobType;
 public class BusRiderRoleTest extends TestCase {
 	// these are instantiated for each test separately via the setUp() method.
 	MockCommuter mockCommuter;
+	MockBus mockBus;
 	TransportationBus bus;
 	CommuterRole commuterRole;
 	PersonAgent p;
@@ -31,6 +33,7 @@ public class BusRiderRoleTest extends TestCase {
 		ContactList.setup();
 		p = new PersonAgent(EnumJobType.NONE, 200,"bob");
 		mockCommuter = new MockCommuter();
+		mockBus = new MockBus();
 		commuterRole = new CommuterRole(null);
 		bus = new TransportationBus(false);
 	}
@@ -47,12 +50,13 @@ public class BusRiderRoleTest extends TestCase {
 	public void testCommuterScenario()
 	{
 		//preconditions
+		assertEquals("mockBus shouldn't have any events in it's event log, but it does.", 0, mockBus.log.size());
+		assertEquals("commuterRole should be in the walking state, but he's not.", commuterRole.mState.walking, commuterRole.mState);
 		
+		commuterRole.mState = commuterRole.mState.atBusStop;
 		
-		
-		
-		commuterRole.msgBoardBus();
-		//
+		//commuterRole.pickAndExecuteAnAction();
+		//assertTrue("The CommuterRole's pickAndExecuteAction should have returned true, but it didn't", commuterRole.pickAndExecuteAnAction());
 		//assertEquals("The MockCommuterRole's log should have one event, it doesn't: ", 1, commuterRole.log.size());
 		
 		
